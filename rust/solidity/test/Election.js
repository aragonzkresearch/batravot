const { expect } = require("chai");
const { ethers } = require("hardhat");
const {BigNumber} = require("ethers");


describe("Testing functionality", function () {

  async function deployElectionContract() {
    const BatRaVot = await ethers.getContractFactory("BatRaVot");
    const batravot = await BatRaVot.deploy();

    await batravot.deployed();
    console.log("Election Handler deployed to:", batravot.address);
    return batravot;
  }

  async function startNewElection(batravot, electionId = BigNumber.from(0)) {
    // Start a new election
    let specifiers = [
      [BigNumber.from('0x0741D5A16A49B7F00F0A82DBABC91D89332D8FED0BA1CE33FF40B363224005EA'),BigNumber.from('0x1FC70911C14D984447BC905FE5712ECA1E16D7498C2334A451CD06FAE6BBFD6D')],[[BigNumber.from('0x24A0CD744DA37D3E6FC2472C00E4D0D3EB89F60A622CCC15E7F1D94693574196'),BigNumber.from('0x30400CDC6644DEA03B1135F3059EACD40287549F29426AFA75D6A1666AC1270C')],[BigNumber.from('0x00EF16853D17C2A273A4145BC3B4900101F5EE6A3209C5293C00A91D17CABD52'),BigNumber.from('0x086E34452857BD3C1B9F6CD350E5C4BE64FCC81500F85471811811A468ADC2FD')]],[BigNumber.from('0x27E040376BCFC428695CB121DBC1E0235C2ED4861410F8A1F1936EFC63098835'),BigNumber.from('0x0C6C2104AC3A92E182DAB6D0310525F5211183D9675C5F9D90DB8D274B9D1493')],[[BigNumber.from('0x1B9475177F7F499AE18F442CF8947F04FB8A85EAF16D02E6B03DF857EF05CAD5'),BigNumber.from('0x22DD32B43B417E038BBDA36E35BA29A3B6D4E1E65E47C7A2EB9339D9307E5380')],[BigNumber.from('0x1D4BEE088DADE6BC2BBAEEDFA03137D28BD0C3E4E205BE1D9445E679216F5826'),BigNumber.from('0x11AC5E97E0AC2368243D6D4C4A910880244E9EE6489C024C4E1D44661552C81A')]]
    ];

    let [specifier_yes_g1, specifier_yes_g2, specifier_no_g1, specifier_no_g2] = specifiers;

    const createElectionTx = await batravot.createElection("Test Election", specifier_yes_g1, specifier_yes_g2, specifier_no_g1, specifier_no_g2);
    await createElectionTx.wait();
    console.log("New election created successfully!")
    
    let election = await batravot.elections(electionId);
    console.log("Current election status: ", election.state)
    return election.state;
  }

  async function submitElectionProof(batravot, yes_vote_ids, no_vote_ids, proof, electionId = BigNumber.from(0)) {
    const submitVoteWithProofTx = await batravot.submitVotesWithProof(electionId, yes_vote_ids, no_vote_ids, proof);
    await submitVoteWithProofTx.wait();
    console.log("Submitted a vote proof for the election.")
  }

  async function closeElectionAndGetResult(batravot, electionId = BigNumber.from(0)) {
    const closeElectionTx = await batravot.closeElection(electionId);
    await closeElectionTx.wait();
    return (await batravot.elections(electionId));
  }

  it("Dummy test", async function () {
    expect(1).to.equal(1);
  });

  it("Can deploy contract", async function () {
    const batravot = await deployElectionContract();
    expect(batravot.address).to.not.equal("");
  });

  it("Can start new election", async function () {
    const batravot = await deployElectionContract();
    expect(await startNewElection(batravot)).to.equal(1);
  });



  it("One correct vote `For`", async function () {
    const batravot = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let [pubKey, s, e] = [
      [BigNumber.from('0x1E9DD2CA209DAB588277365B9316257F40199D2DFEDBF4B007F5069FCBD7595D'),BigNumber.from('0x17700552D117EB4E4A2A69DFFC989AE48D0C2375EC30EC7D42B5189EA1CC56DF')], BigNumber.from('0x2A5D9B3DE008C78281332B84E424419067BB59825C835BCABF36DC5F667D6175'), BigNumber.from('0x1932814898D51404A2C6B3DE626CA670C4B1602ABD404A24E00A76C3B057854F')
    ];

    const registerKeyTx = await batravot.registerInCensus(pubKey, [s, e]);
    await registerKeyTx.wait();
    console.log("Registered a key in the census.")

    // Submit a proof for the election vote
    let [proof] = [
      [BigNumber.from('0x0D33F58F7CBF6F726A992B9B8C91D106B5BF645E897C1148FC59EA25DE529154'),BigNumber.from('0x03E0083DA22D66EBEF47316F8951298AB8605985FE39FA2B9C00E9744E311B9D')]
    ];

    // Who voted for whom
    let yes_vote_ids = [0] // First person in the census voted yes
    let no_vote_ids = [] // No one voted no


    await submitElectionProof(batravot, yes_vote_ids, no_vote_ids, proof);
    console.log("Submitted a vote proof for the election.")

    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVotes).to.equal(1);
    expect(election.result.inFavour).to.equal(1);
  });

  it("10 correct votes `For`", async function () {
    const batravot = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let voters = [
      [[BigNumber.from('0x1E9DD2CA209DAB588277365B9316257F40199D2DFEDBF4B007F5069FCBD7595D'),BigNumber.from('0x17700552D117EB4E4A2A69DFFC989AE48D0C2375EC30EC7D42B5189EA1CC56DF')], BigNumber.from('0x205F7975726A4E051CCA9D092A956605050DAED3C0D3291A74F39D66B4F09235'), BigNumber.from('0x0B91AF868A03CA199E2BA3C61CEF858C7056758E5885537888408728127975B8')],

      [[BigNumber.from('0x21E71F2727A6277CE12457973997A101FC0D483FFCFDD0D6C7B57BC98A34E9D0'),BigNumber.from('0x0BD701B9C3B3FF922D8DCBB2A755640AF6F88D4429DE1914EC1A850287C34C46')], BigNumber.from('0x09926DC8052AEAB2DC4A650D7DCBEBD4C50FFFAF7D7C72D0D03BD101F3EFA1AF'), BigNumber.from('0x003FC3D2FD7C66FC20016128CB04C297CD777D096FE2ECA0FD662BB148928A69')],

      [[BigNumber.from('0x049B48A8D23B401718B2EE7BF28C10153BC47910AB97733427A92176B7661A4D'),BigNumber.from('0x23CAAE93E1D243618874BD64727169FED46283A2172292FDD8B0CCD21DF19503')], BigNumber.from('0x2A8F51C7379163677A9EC2557B3A9A943F4D6A52044D5D6529318877EB9AB500'), BigNumber.from('0x22A667C9350C5F80B011AC3D37678FBCDD460D01BCF1B01885C7CD31E7AF42E5')],

      [[BigNumber.from('0x210548074105159AAFA9544A87350B1A0C0A6D74BB90664E9C81F1352B2E0847'),BigNumber.from('0x203AF9E72C53148F55092B84EF22C9557A6E4461ACEC2AE90CB2734643A69BE9')], BigNumber.from('0x2E0127DFABBAD8F7D40969F8498C4836EBC5236643ACEFF7A064D7B2C42C9DE3'), BigNumber.from('0x2D29104FAD165986B8EDAA6C68630A67ABF7CA60B9BAB61B05A9A87A2B82E75E')],

      [[BigNumber.from('0x034CD300A821B24D8F49BA1F888AA9A9D77819567486616979B04C73BE5BE9BD'),BigNumber.from('0x23D592DE5166040F32F8A64315369AFA14DC2D80CA89F573E04DB04F0B53DB1A')], BigNumber.from('0x023EEFA5A824B3753EDB0635B758F1E71365CCF9BFD489EEBF7EBC0DA03F85A0'), BigNumber.from('0x0AFD1CA2996AE39171318523A4F4299872CEB77D2EDA37E4D5587A1382AAFB96')],

      [[BigNumber.from('0x0B0ACA69BD03AF56A0E8F27F28D20A08DF27CA59611230B8AED2C2C2BCEFB18B'),BigNumber.from('0x28747C9F15C746F6268F1885CF6275407782BFEEB71FAD7C4FF8621425A32B6B')], BigNumber.from('0x10D2D946F4E35F13DEB42941E1F1E5875BBD114CA43368C9543D40B837489282'), BigNumber.from('0x2ADD0FF958949A67C70CE5FA15CA6DB12E7E422A2E65E0B961A8C87935E39254')],

      [[BigNumber.from('0x2CBD484F1AC6F253B65E23A682BF38B8CAD452D51BBDC8B39020C2121F415D52'),BigNumber.from('0x1D640DE66B7CAB78FA058161A66F843792076974E09529A02D35405B05B0404D')], BigNumber.from('0x0F96141DA30D93817B646A0D47AFF3FF0452D2A40598483C7C610FCD4C413C7E'), BigNumber.from('0x17CAB924A87410201AC034B8881D954FA4BB49EAEF9687C5D0132402D6CB0D5B')],

      [[BigNumber.from('0x2E89387765381DC852F3D9AE76180BE6F8E75F7A5126CC7D9B66D5D743112CE7'),BigNumber.from('0x1AD284E8F96749EA255DCE50851A5E9EA2DCE6EF89EA65F49A4EF0EAEF28FA36')], BigNumber.from('0x1B1517AD22AE07136BB6088A998332C6DFA547547FD5652E216179159A2C5B56'), BigNumber.from('0x2043681D695892EDD5239A3CF59485434CABEA82C50F8F390D990830346462C2')],

      [[BigNumber.from('0x16D88BBED3D36297B9338A1185E8F5C4574ED9E71F4E268C71E9D8C438A4A17C'),BigNumber.from('0x0B58BE630D62F275F97BFA01F7B7750E09C5DC36E9E5163139FE8D140D5FA977')], BigNumber.from('0x22BAB385CA4EA78232659D149DC58402206B62EC264E46A4CB6B4E661C81DBF1'), BigNumber.from('0x140A9747B3B7D5CA0501733FE98BCC2B841AABC802E736383087EC1F43713F40')],

      [[BigNumber.from('0x27E06B513971CAF0431950D334F79F3B80310FA8BFFA70B4BE7DB86150B8DAA4'),BigNumber.from('0x03E1A2D05561FF064649FCFF4D8CB25720632F427C936A97D6EA52A0D2119154')], BigNumber.from('0x1ECA1A581477E1A6D694A8F79AB01FE9D6260FED2D21B5E91909023CBB703F3A'), BigNumber.from('0x05A0EEA03540F916A5955B86419C862B5C4F5970F79CC34B4E7BC724254F13BD')]
    ];

    for (const voter of voters) {
      // Add key to the election census
      let [pubKey, s, e] = voter;

      const registerKeyTx = await batravot.registerInCensus(pubKey, [s, e]);
      await registerKeyTx.wait();
      console.log("Updated census with a new key.");
    }

    // Submit a proof for the election vote
    let [proof] = [
      [BigNumber.from('0x0F23D56A97C13AB428A0ADCF7E529616BCBFCD2C59B54446172D9732FE830B4D'),BigNumber.from('0x2D8A73F590783EBA95C766E81F942ECB98F79B1EA42628476736D69AEFCE79D0')]
    ];

    // Who voted for whom
    let yes_vote_ids =
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    let no_vote_ids =
        [] // No one voted no


    await submitElectionProof(batravot, yes_vote_ids, no_vote_ids, proof);
    console.log("Submitted a vote proof for the election.")

    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVotes).to.equal(10);
    expect(election.result.inFavour).to.equal(10);

  });

  it("One correct vote `Against`.", async function () {
    const batravot = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let [pubKey, s, e] = [
      [BigNumber.from('0x1E9DD2CA209DAB588277365B9316257F40199D2DFEDBF4B007F5069FCBD7595D'),BigNumber.from('0x17700552D117EB4E4A2A69DFFC989AE48D0C2375EC30EC7D42B5189EA1CC56DF')], BigNumber.from('0x2A5D9B3DE008C78281332B84E424419067BB59825C835BCABF36DC5F667D6175'), BigNumber.from('0x1932814898D51404A2C6B3DE626CA670C4B1602ABD404A24E00A76C3B057854F')
    ];

    const registerKeyTx = await batravot.registerInCensus(pubKey, [s, e]);
    await registerKeyTx.wait();
    console.log("Registered a key in the census.")

    // Submit a proof for the election vote
    let [proof] = [
      [BigNumber.from('0x280CCDC11D1CAE0AC40BF01E00B9078184954B4E6BBCFBEB421FF3A7AD33E080'),BigNumber.from('0x08D8117CAF3987B6149EC4267FF9995051465115F68D527F2EAD2D7E10C5FD1E')]
    ];

    // Who voted for whom
    let yes_vote_ids = [] // First person in the census voted yes
    let no_vote_ids = [0] // No one voted no


    await submitElectionProof(batravot, yes_vote_ids, no_vote_ids, proof);
    console.log("Submitted a vote proof for the election.")

    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVotes).to.equal(1);
    expect(election.result.inFavour).to.equal(0);
  });

  it("10 correct votes `Against`", async function () {

    const batravot = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let voters = [
      [[BigNumber.from('0x1E9DD2CA209DAB588277365B9316257F40199D2DFEDBF4B007F5069FCBD7595D'),BigNumber.from('0x17700552D117EB4E4A2A69DFFC989AE48D0C2375EC30EC7D42B5189EA1CC56DF')], BigNumber.from('0x205F7975726A4E051CCA9D092A956605050DAED3C0D3291A74F39D66B4F09235'), BigNumber.from('0x0B91AF868A03CA199E2BA3C61CEF858C7056758E5885537888408728127975B8')],

      [[BigNumber.from('0x21E71F2727A6277CE12457973997A101FC0D483FFCFDD0D6C7B57BC98A34E9D0'),BigNumber.from('0x0BD701B9C3B3FF922D8DCBB2A755640AF6F88D4429DE1914EC1A850287C34C46')], BigNumber.from('0x09926DC8052AEAB2DC4A650D7DCBEBD4C50FFFAF7D7C72D0D03BD101F3EFA1AF'), BigNumber.from('0x003FC3D2FD7C66FC20016128CB04C297CD777D096FE2ECA0FD662BB148928A69')],

      [[BigNumber.from('0x049B48A8D23B401718B2EE7BF28C10153BC47910AB97733427A92176B7661A4D'),BigNumber.from('0x23CAAE93E1D243618874BD64727169FED46283A2172292FDD8B0CCD21DF19503')], BigNumber.from('0x2A8F51C7379163677A9EC2557B3A9A943F4D6A52044D5D6529318877EB9AB500'), BigNumber.from('0x22A667C9350C5F80B011AC3D37678FBCDD460D01BCF1B01885C7CD31E7AF42E5')],

      [[BigNumber.from('0x210548074105159AAFA9544A87350B1A0C0A6D74BB90664E9C81F1352B2E0847'),BigNumber.from('0x203AF9E72C53148F55092B84EF22C9557A6E4461ACEC2AE90CB2734643A69BE9')], BigNumber.from('0x2E0127DFABBAD8F7D40969F8498C4836EBC5236643ACEFF7A064D7B2C42C9DE3'), BigNumber.from('0x2D29104FAD165986B8EDAA6C68630A67ABF7CA60B9BAB61B05A9A87A2B82E75E')],

      [[BigNumber.from('0x034CD300A821B24D8F49BA1F888AA9A9D77819567486616979B04C73BE5BE9BD'),BigNumber.from('0x23D592DE5166040F32F8A64315369AFA14DC2D80CA89F573E04DB04F0B53DB1A')], BigNumber.from('0x023EEFA5A824B3753EDB0635B758F1E71365CCF9BFD489EEBF7EBC0DA03F85A0'), BigNumber.from('0x0AFD1CA2996AE39171318523A4F4299872CEB77D2EDA37E4D5587A1382AAFB96')],

      [[BigNumber.from('0x0B0ACA69BD03AF56A0E8F27F28D20A08DF27CA59611230B8AED2C2C2BCEFB18B'),BigNumber.from('0x28747C9F15C746F6268F1885CF6275407782BFEEB71FAD7C4FF8621425A32B6B')], BigNumber.from('0x10D2D946F4E35F13DEB42941E1F1E5875BBD114CA43368C9543D40B837489282'), BigNumber.from('0x2ADD0FF958949A67C70CE5FA15CA6DB12E7E422A2E65E0B961A8C87935E39254')],

      [[BigNumber.from('0x2CBD484F1AC6F253B65E23A682BF38B8CAD452D51BBDC8B39020C2121F415D52'),BigNumber.from('0x1D640DE66B7CAB78FA058161A66F843792076974E09529A02D35405B05B0404D')], BigNumber.from('0x0F96141DA30D93817B646A0D47AFF3FF0452D2A40598483C7C610FCD4C413C7E'), BigNumber.from('0x17CAB924A87410201AC034B8881D954FA4BB49EAEF9687C5D0132402D6CB0D5B')],

      [[BigNumber.from('0x2E89387765381DC852F3D9AE76180BE6F8E75F7A5126CC7D9B66D5D743112CE7'),BigNumber.from('0x1AD284E8F96749EA255DCE50851A5E9EA2DCE6EF89EA65F49A4EF0EAEF28FA36')], BigNumber.from('0x1B1517AD22AE07136BB6088A998332C6DFA547547FD5652E216179159A2C5B56'), BigNumber.from('0x2043681D695892EDD5239A3CF59485434CABEA82C50F8F390D990830346462C2')],

      [[BigNumber.from('0x16D88BBED3D36297B9338A1185E8F5C4574ED9E71F4E268C71E9D8C438A4A17C'),BigNumber.from('0x0B58BE630D62F275F97BFA01F7B7750E09C5DC36E9E5163139FE8D140D5FA977')], BigNumber.from('0x22BAB385CA4EA78232659D149DC58402206B62EC264E46A4CB6B4E661C81DBF1'), BigNumber.from('0x140A9747B3B7D5CA0501733FE98BCC2B841AABC802E736383087EC1F43713F40')],

      [[BigNumber.from('0x27E06B513971CAF0431950D334F79F3B80310FA8BFFA70B4BE7DB86150B8DAA4'),BigNumber.from('0x03E1A2D05561FF064649FCFF4D8CB25720632F427C936A97D6EA52A0D2119154')], BigNumber.from('0x1ECA1A581477E1A6D694A8F79AB01FE9D6260FED2D21B5E91909023CBB703F3A'), BigNumber.from('0x05A0EEA03540F916A5955B86419C862B5C4F5970F79CC34B4E7BC724254F13BD')]
    ];

    for (const voter of voters) {
      // Add key to the election census
      let [pubKey, s, e] = voter;

      const registerKeyTx = await batravot.registerInCensus(pubKey, [s, e]);
      await registerKeyTx.wait();
      console.log("Updated census with a new key.");
    }

    // Submit a proof for the election vote
    let [proof] = [
      [BigNumber.from('0x2FA96DBCC8B40FC229E61F511AFF9AFB76E49D7EBE5A9939EF3E7DF09BC64031'),BigNumber.from('0x03AAC922DCCA6DFCCAF0F0A4193C4B33CEBD04AD5E7779E7C407150A71543F57')]
    ];

    // Who voted for whom
    let yes_vote_ids =
        [] // No one voted yes
    let no_vote_ids =
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


    await submitElectionProof(batravot, yes_vote_ids, no_vote_ids, proof);
    console.log("Submitted a vote proof for the election.")

    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVotes).to.equal(10);
    expect(election.result.inFavour).to.equal(0);

  });

  it("1 correct vote `For` and 1 correct vote `Against`", async function () {

    const batravot = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let voters = [
      [[BigNumber.from('0x1E9DD2CA209DAB588277365B9316257F40199D2DFEDBF4B007F5069FCBD7595D'),BigNumber.from('0x17700552D117EB4E4A2A69DFFC989AE48D0C2375EC30EC7D42B5189EA1CC56DF')], BigNumber.from('0x2D8D3302434A0EC5009C5AF1FB384FC4B8036DD9119807F8FEB05BBC6330CA7B'), BigNumber.from('0x294E7E556E063E762F4D3A6365A084AE08AE4D4001FA4B1E14FF7E64CCB5BCE2')],

      [[BigNumber.from('0x21E71F2727A6277CE12457973997A101FC0D483FFCFDD0D6C7B57BC98A34E9D0'),BigNumber.from('0x0BD701B9C3B3FF922D8DCBB2A755640AF6F88D4429DE1914EC1A850287C34C46')], BigNumber.from('0x26EB65497FD690DABC4498A99AE4A6DD28CE0D3F877B59D62BBFC1954AFBE22F'), BigNumber.from('0x2A4A7D79DF231AEA58DF307DD5FB5AB68F0CF17107A881739E9705EC02097554')]
    ];

    for (const voter of voters) {
      // Add key to the election census
      let [pubKey, s, e] = voter;

      const registerKeyTx = await batravot.registerInCensus(pubKey, [s, e]);
      await registerKeyTx.wait();
      console.log("Updated census with a new key.");
    }

    // Submit a proof for the election vote
    let [proof] = [
      [BigNumber.from('0x0EFB960892F762E143C9F6665ED6210629C23BCBD4A4E993E9B759440AFB885E'),BigNumber.from('0x19795FB7DB6430915D985A580C383A0214F112B3BC2ADD6FA1B79E40F509CE77')]
    ];

    // Who voted for whom
    let yes_vote_ids =
        [0]
    let no_vote_ids =
        [1]


    await submitElectionProof(batravot, yes_vote_ids, no_vote_ids, proof);
    console.log("Submitted a vote proof for the election.")

    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVotes).to.equal(2);
    expect(election.result.inFavour).to.equal(1);
  });

  it("2 correct vote `For` and 1 correct vote `Against", async function () {
    const batravot = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let voters = [
      [[BigNumber.from('0x1E9DD2CA209DAB588277365B9316257F40199D2DFEDBF4B007F5069FCBD7595D'),BigNumber.from('0x17700552D117EB4E4A2A69DFFC989AE48D0C2375EC30EC7D42B5189EA1CC56DF')], BigNumber.from('0x2FFEB08D075E14CC0BEB2C27824CD31B7CA720A3EB925B816CAFEB902C61F7AC'), BigNumber.from('0x2A4A7D79DF231AEA58DF307DD5FB5AB68F0CF17107A881739E9705EC02097554')],

      [[BigNumber.from('0x21E71F2727A6277CE12457973997A101FC0D483FFCFDD0D6C7B57BC98A34E9D0'),BigNumber.from('0x0BD701B9C3B3FF922D8DCBB2A755640AF6F88D4429DE1914EC1A850287C34C46')], BigNumber.from('0x2EE1CA127C1646CD497DA73DE3F0FD5AB042BEFCABF5EA809449473C4629E01B'), BigNumber.from('0x2AA159161C518670E7BCA3EFADBC6B241304B504064A03C1EFF32C87FBCFFCB9')],

      [[BigNumber.from('0x049B48A8D23B401718B2EE7BF28C10153BC47910AB97733427A92176B7661A4D'),BigNumber.from('0x23CAAE93E1D243618874BD64727169FED46283A2172292FDD8B0CCD21DF19503')], BigNumber.from('0x1DCF3A78D3BEC37F280FB10772B51881808BA33ACE9C66704D29702CC1E34C83'), BigNumber.from('0x0EF2E7E14F1908D62652C7D29B8C935F30683E7F494C54093D1EFAD15C30D4E7')]
    ];

    for (const voter of voters) {
      // Add key to the election census
      let [pubKey, s, e] = voter;

      const registerKeyTx = await batravot.registerInCensus(pubKey, [s, e]);
      await registerKeyTx.wait();
      console.log("Updated census with a new key.");
    }

    // Submit a proof for the election vote
    let [proof] = [
      [BigNumber.from('0x181153DA1A2538A74E53D83400E018DBEFA330159E44CF4FB6F0E513A2BC5059'),BigNumber.from('0x22101D45CF04E3EA854D87FE3CABF9A5A36261B00A077E62D6494D00D0278CA8')]
    ];

    // Who voted for whom
    let yes_vote_ids =
        [0, 2]
    let no_vote_ids =
        [1]


    await submitElectionProof(batravot, yes_vote_ids, no_vote_ids, proof);
    console.log("Submitted a vote proof for the election.")

    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVotes).to.equal(3);
    expect(election.result.inFavour).to.equal(2);
  });

  it("30 correct votes, 19 `For`, 11 `Against`", async function () {
    const batravot = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let voters = [
      [[BigNumber.from('0x1E9DD2CA209DAB588277365B9316257F40199D2DFEDBF4B007F5069FCBD7595D'),BigNumber.from('0x17700552D117EB4E4A2A69DFFC989AE48D0C2375EC30EC7D42B5189EA1CC56DF')], BigNumber.from('0x17ED99B1295D05477F3C012A3CB96C7E26DF76417F5A87DA3F19E92514A7E676'), BigNumber.from('0x26D680660D7CAF4358B6A5020BDA1E827B20D68FC7A0D3FFCFF811F5F9E49CAE')],

      [[BigNumber.from('0x21E71F2727A6277CE12457973997A101FC0D483FFCFDD0D6C7B57BC98A34E9D0'),BigNumber.from('0x0BD701B9C3B3FF922D8DCBB2A755640AF6F88D4429DE1914EC1A850287C34C46')], BigNumber.from('0x184CA64F1FD6D38F4DB78B8B40B0B2B34A348EF12D711FC498FFB23BC69EF26C'), BigNumber.from('0x1E5D0649FF0EC0471A01B636375E761096FA7A5AFA2E54DB7A79F0D40DF1C5F1')],

      [[BigNumber.from('0x049B48A8D23B401718B2EE7BF28C10153BC47910AB97733427A92176B7661A4D'),BigNumber.from('0x23CAAE93E1D243618874BD64727169FED46283A2172292FDD8B0CCD21DF19503')], BigNumber.from('0x19DC7EE63668860961D9C3348899B70D3FC048D223B4F56CF0080F9B306B1695'), BigNumber.from('0x02C55D01855ABDFFB382C833929CD3A2E9F79DF300BF724E476A3B5CE6D30611')],

      [[BigNumber.from('0x210548074105159AAFA9544A87350B1A0C0A6D74BB90664E9C81F1352B2E0847'),BigNumber.from('0x203AF9E72C53148F55092B84EF22C9557A6E4461ACEC2AE90CB2734643A69BE9')], BigNumber.from('0x2771ED216F26266B3DB713EB64CC18E9D6B32DC9D4940708EA9ECF5FFA1E400D'), BigNumber.from('0x048B1D42554DB6E1F4C2443C50D3F58BEEFB4692F19E6CA26055B022B83AEA27')],

      [[BigNumber.from('0x034CD300A821B24D8F49BA1F888AA9A9D77819567486616979B04C73BE5BE9BD'),BigNumber.from('0x23D592DE5166040F32F8A64315369AFA14DC2D80CA89F573E04DB04F0B53DB1A')], BigNumber.from('0x2FBB6D21F6CE7D878C38BBCAC2E8C1DCC2EDFDEA2AFF51F39A5445FA6A9FC83E'), BigNumber.from('0x281C8D36A797DB021DAC956D69E3EC0D69F07C60455655CC4F1C963174EC230A')],

      [[BigNumber.from('0x0B0ACA69BD03AF56A0E8F27F28D20A08DF27CA59611230B8AED2C2C2BCEFB18B'),BigNumber.from('0x28747C9F15C746F6268F1885CF6275407782BFEEB71FAD7C4FF8621425A32B6B')], BigNumber.from('0x00CCDB1FBE93D79F11CDAE6F64E6B501FD5200E864130ACDC84ADE02F0441975'), BigNumber.from('0x15F0767070B7FE30E8A1EF37DC1B70FFD62773CA801DF88B45C842E2621A6953')],

      [[BigNumber.from('0x2CBD484F1AC6F253B65E23A682BF38B8CAD452D51BBDC8B39020C2121F415D52'),BigNumber.from('0x1D640DE66B7CAB78FA058161A66F843792076974E09529A02D35405B05B0404D')], BigNumber.from('0x00EB3DD9201EC3943932CEA1C0FC3BA16981FF0A6321E0F02438E341DF6CF4FA'), BigNumber.from('0x1B3A0A5C473E67F61AC583B6F8D7F74B518289DACDB561F597E44A74C3888683')],

      [[BigNumber.from('0x2E89387765381DC852F3D9AE76180BE6F8E75F7A5126CC7D9B66D5D743112CE7'),BigNumber.from('0x1AD284E8F96749EA255DCE50851A5E9EA2DCE6EF89EA65F49A4EF0EAEF28FA36')], BigNumber.from('0x0EFD31569DAD01B0CD1C0D1D9EA3AA390E5DB4CEA854C2519C96EE3F7FE41225'), BigNumber.from('0x08B3215A64E0F45FB46A7D415E99D2967EDCDE5DA38F378EC9FC7AF8FF649A7E')],

      [[BigNumber.from('0x16D88BBED3D36297B9338A1185E8F5C4574ED9E71F4E268C71E9D8C438A4A17C'),BigNumber.from('0x0B58BE630D62F275F97BFA01F7B7750E09C5DC36E9E5163139FE8D140D5FA977')], BigNumber.from('0x0305FD8124F50233900EFCF6D87C19F43515089C2D2278EC4C05EF88ED9046EA'), BigNumber.from('0x0260DE4F867B41C765C8ACE673BB7F439D4675AE3A27596DFB40457FD2ED91E2')],

      [[BigNumber.from('0x27E06B513971CAF0431950D334F79F3B80310FA8BFFA70B4BE7DB86150B8DAA4'),BigNumber.from('0x03E1A2D05561FF064649FCFF4D8CB25720632F427C936A97D6EA52A0D2119154')], BigNumber.from('0x2A1739408AE9252C7D4999AA46F2A9EC161A7B4F79B10AD0EC94EB45FAC1A6E8'), BigNumber.from('0x2393DF5C444EC42EB18527E834A3EE85A35090E5F60A05019EEC1BAD8A646008')],

      [[BigNumber.from('0x2D123E21E60C3D72EF7D0241F4E204C1AC3A757F010A30C141073F8CDCF35BF5'),BigNumber.from('0x06AFC1AFAD887E9BA7C7C986F4B99E8C4E180B899D03CA755B4F410FFA308368')], BigNumber.from('0x300FC4EB290DB953D964B3580CFEB44FB7AACBD000BEF09B9B794B761EE7E15E'), BigNumber.from('0x0CD160C237C6B4F4F0B6DECAEE35401D6CE4BF6B93FCCAB6779FF656E7A9C7BD')],

      [[BigNumber.from('0x1E955D79BC27D6BA4958477C46E3B1E202F74010EDA6B09741C10EE1C0046085'),BigNumber.from('0x24C0A2395CBCD0E6369A8A80E21D0DA96A7E7C526B26A14F3B8E803A5205754E')], BigNumber.from('0x1CEF954628A8EAAB4E052A3C25FFF7F901000587D743AEEE7A0A94D74332A261'), BigNumber.from('0x079C416FA9CF991218A8D7FED32A2815D456F3590273FDD3E41C8D249893FD79')],

      [[BigNumber.from('0x2964FDD7EC069C336A0810CB8F01581002D5DD2AD942C2657CCB6EDB0D0561F1'),BigNumber.from('0x0C93204F9FB479543EAFE30F1BDF076F4183AC1BEB2E78C746ABF48ED7309B01')], BigNumber.from('0x0026B6F7DF0D2E39D489FFA2A025873D969517980EBCB25980FB4380D461728C'), BigNumber.from('0x02420941E8FDC43FF5F04EDDE171EC155E4CEBC190191FB5BB2EE4E833E7BDD6')],

      [[BigNumber.from('0x0B53092F2C2517788C6C6F1568B7019440DE281B68507E91FE3DBC43A467112A'),BigNumber.from('0x16F049A64594020F05EFD81ADFEEBD9AF2E07A5EF019417086F50AC21BC12782')], BigNumber.from('0x27B6C3C318C6B98D9E494246C524AE406D1AD66AB91AAB3F16ECDD24A1F5932C'), BigNumber.from('0x2A3AA624B1BCA332755B0EE7EB7075E33FD157176E0F1BD680AA7AA3BF53B5A5')],

      [[BigNumber.from('0x16F8DB936CB9121C49F5A98DD24D689B078C1E1E12B1A25BFCC544D05D9799DB'),BigNumber.from('0x277AF1CD5C6F5872F7B81351F6856C5C1790E783B97A2CC97D7CC707C03567C4')], BigNumber.from('0x150E9FB70F4A5472DAEDACB70A966DF37A2CD06EB679726001E77D5814C5E322'), BigNumber.from('0x1F39D13681643B3DE3952C1CD314B17D1A23F64FFE70AB07B466B12ABD243ECB')],

      [[BigNumber.from('0x09129399909D9E8A6526B62C4B3C18AE6E1C7832BD4CEA4C84A2BCAC0C354735'),BigNumber.from('0x1B489DF6588745E429E71A5382D7787604750D1D592EBACDBD166A77A9961E48')], BigNumber.from('0x027C1BF6B5C288C4B63664CEE12B98F48465DF3FF4F0489A259E11ED564E8C2C'), BigNumber.from('0x15E59C35E19801AC7FB9C16A41F17A9D00E6A39BB71412EFBEFC47B3AF0ABB1B')],

      [[BigNumber.from('0x22CEC6C1FD240CC98B0C1558462F58C1C6462605838B150E49B2CFCDF921E72E'),BigNumber.from('0x200440AED11592ED0D76F262D1F472540664B88475C399429850804B3D482E48')], BigNumber.from('0x0E6FFED4AB80C27C3E013825A50E6C51831FD2E14F2E2A40692790549F4B32D5'), BigNumber.from('0x1F3BBDF73E7E7DC2631BCC780720AB81DA62954FDD042AFDA78B8F6C3A2E5FF6')],

      [[BigNumber.from('0x00D78D86F30535EF092B90E04C1538535A414CCD881FE2DE424207342FD21B9A'),BigNumber.from('0x18A4F1031685B6AB927E67E3D0D71BCB9FC930BD8A3D014816ED72ED5A98377B')], BigNumber.from('0x23B394BAE6E54A00FA0E99E905CE845FFDD8063DA5B4E57A844C79016538B618'), BigNumber.from('0x1876FBE45576259968EB5CD8C60041311710E71575F46C097D1B66E9CCDE4C5A')],

      [[BigNumber.from('0x192FB53A56E8A78AF27E8DC61F89DB22C89AEE2B1B2D05AF3E424228224324C6'),BigNumber.from('0x14817A025FB3DB1F193A98D33A46C28529DFA0987D410B87F50563063637516A')], BigNumber.from('0x2B21DDEA62865503059D0B3CD6076DCDF4CFC370E6548990AF29125D937C5F9D'), BigNumber.from('0x10772D2BCDB991BCCBF7B7A03D4B8BF6AA67C04879B20FCD69F268077E0E4124')],

      [[BigNumber.from('0x0635149E7B25829A6242E9521DB78689F098144C6BBE9DA20E6A608E87F13733'),BigNumber.from('0x120E78D4F6997AB34F3C8327B7DA881A3B6EE20487B7A47A57852D82B3083527')], BigNumber.from('0x2474A797AEB2C9D9F50EE2E47335F8312D2394DC48FAF0EF8B1AB916A4AF2817'), BigNumber.from('0x14DB73C3C81A3A0E682227C644BC1CC5418B0502A22B686868EA2C27933B476F')],

      [[BigNumber.from('0x1B523B3F2A2EDDEE8E348EEE7E26F5D782D0FDD932D331FFC82198AFBDBD920C'),BigNumber.from('0x01D9020000C5302DB805E868D47CF1714CEB0DA3F39CC98BF271722F445E5866')], BigNumber.from('0x10ADF865991B7B9F9CD81F452612819C04CB6D2DA44FCBA3A6A11D218C596328'), BigNumber.from('0x284C505E492BE56E96F117AB2E436AD986794168A03ADADA7A89504D590B80E8')],

      [[BigNumber.from('0x197FF10C471861D1D430EABD4D85EEB9A55E7754AC60C694573A879566A38193'),BigNumber.from('0x09B2E06591A203B911AE89EB29883883F7C560EFAB2DBE26E9A7ED14BBC2F745')], BigNumber.from('0x16518D4D5221D384C5A2917B8EE4D08F4CA696202F46E54D725A2ACD43138779'), BigNumber.from('0x0690363B98E4A00A7A42969097AC555836B30DB5327A4588AC48006DE0E7F139')],

      [[BigNumber.from('0x0034986DC706239F58C26E5A433B4DB1D8ACF6E170BEA825D86FEECE2221A730'),BigNumber.from('0x225513BEC7546979D347FE95AA7B55A850C2A5F6DFBBA5ECF4E101A6C1BB00B7')], BigNumber.from('0x2FE3D38C177281E0444BF8188DD4D2A1AFE2B279B7F667D5ACF8AC5D0BBFA362'), BigNumber.from('0x0FB23D15073D208200F80C2F0E4C9695BAE376D6F7E5925ED681F7BAD25D7F39')],

      [[BigNumber.from('0x2DDD8F36EFB17C7E4E915DD62D3E246EF7E273BBA0B7662879E8B5FE0FA167AD'),BigNumber.from('0x2EC9C9290735461446EC6C6C8BA0AC5FDD0BEEA95E6F98997610DF2FFE0265A6')], BigNumber.from('0x02E7E6FD2E8B168942B9C7B6B38BFFD831E1B1956453F5901C7049C94C3F664B'), BigNumber.from('0x2BD888934F9814A1D938AB5A4F5589472B22D5BF31B927C5D3D93E56C6017454')],

      [[BigNumber.from('0x050A38DB8AF610009519D9941E63FC2871B5282C6E009A4DB97DEE06C8AC0E0B'),BigNumber.from('0x14166488F26D52342C66A31AD4D22D50628ECE4C746A33C93F3B0407400CD8BA')], BigNumber.from('0x0E94AADAAF9014905681123C61343DBFA80A8D03389BD96A250FA1218414809F'), BigNumber.from('0x08F25B984BC7733F013D91502386D67BEA75E05366C3D222DC518BA2DE81D4D8')],

      [[BigNumber.from('0x1181DBCC837C47F27E5E140641EDE064075AC80E5EA245B0AFD54215F82E7C05'),BigNumber.from('0x120504F2B67DE88C3F2A50ACAB07A0FE0B28FB2C3447374523117F7AAC9A3490')], BigNumber.from('0x2EE0B98BB81C9E9F0A917A57A62DA18ABE67B82988D2569B4C594997A7C3C70B'), BigNumber.from('0x19E498DD96AC4FE931E90D2D2ADACA3E2F7BA334F31645B137D49BB6193230BD')],

      [[BigNumber.from('0x0462D76265D340094A362DC677B573747F1BDFC81C60765C666B46F33C3E313A'),BigNumber.from('0x1CBF7C78E886DB159711EDD9E32455F3777090C49163A4ECA4C4F378A7029FCB')], BigNumber.from('0x0F63BF4A77CFE9391B3CC65862A89D86C8FA75A32D18F8072C2EAE15BF6D683D'), BigNumber.from('0x0D67F671411FF0C3E21E049694D742B11B6DAEF96052A94627DC32D756CB6C87')],

      [[BigNumber.from('0x1F3C73547E1A8C4C13FAFCAA9F9EE367D8AD1418CC7DD7194131F94D8FD17CCE'),BigNumber.from('0x15C02655AE6376920BF176651A35C4496362D36A0D58584D30040F5D2EF28EFB')], BigNumber.from('0x26479E158526DF7C0EBE1F9FBDD360CE7CD3C2BB7ABA121571DBE60C470F88F7'), BigNumber.from('0x0B18ACE1664E3AD092DE4A6B2B336E43680F1832FE70B529807D62C54B425D08')],

      [[BigNumber.from('0x23DB01EF10A87EC2D1E78841F8D94A4C8A17F86749493FE17F80C9E2100DE2E4'),BigNumber.from('0x0075D1D492BC749FB1C00B3DA9097F84E01FEFDCE4F445C96EFEDEAC72988B4F')], BigNumber.from('0x130CE1A3070D2609495DD74C89770D7A852AD586B805E2A238E0620E3774B727'), BigNumber.from('0x0AFC68B7293ABDF746A89756004C33768370DBB2A854920FEDEF742852AE641F')],

      [[BigNumber.from('0x1990C6E130A827588B85962DEDF15117884D489E1B12C933B6BD7D8C24D8FD34'),BigNumber.from('0x2617CCADFD8EB223B8B7B39103101732AB4068111C2D1DFD58FF4138FBBA048B')], BigNumber.from('0x1E06192DB603396778BAD7E0A021DD4D04AA6FA69BEBA1525BEA31BF142DCAE0'), BigNumber.from('0x27F3396AB5C6CEF5C96EA2F4DD0A9927625B7B977908EFF6E0A30125D7048203')]
    ];

    for (const voter of voters) {
      // Add key to the election census
      let [pubKey, s, e] = voter;

      const registerKeyTx = await batravot.registerInCensus(pubKey, [s, e]);
      await registerKeyTx.wait();
      console.log("Updated census with a new key.");
    }

    // Submit a proof for the election vote
    let [proof] = [
      [BigNumber.from('0x0AE1A91BDB33EA55FFEF75DA792BE5911869E6AEEAE10856BC0C1CCB3DA321BE'),BigNumber.from('0x13270D81ECA5B4849952139D435113C41204FED0775511C88CDEDDC5CA4C2A3B')]
    ];

    // Who voted for whom
    let yes_vote_ids =
        [0, 2, 3, 4, 5, 6, 8, 9, 10, 12, 14, 15, 17, 19, 21, 22, 25, 27, 29]
    let no_vote_ids =
        [1, 7, 11, 13, 16, 18, 20, 23, 24, 26, 28]


    await submitElectionProof(batravot, yes_vote_ids, no_vote_ids, proof);
    console.log("Submitted a vote proof for the election.")

    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVotes).to.equal(30);
    expect(election.result.inFavour).to.equal(19);
  });


  it("No one Voted", async function () {
    const batravot = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    // These keys do not matter, as no one voted
    let voters = [
      [[BigNumber.from('0x1E9DD2CA209DAB588277365B9316257F40199D2DFEDBF4B007F5069FCBD7595D'),BigNumber.from('0x17700552D117EB4E4A2A69DFFC989AE48D0C2375EC30EC7D42B5189EA1CC56DF')], BigNumber.from('0x2FFEB08D075E14CC0BEB2C27824CD31B7CA720A3EB925B816CAFEB902C61F7AC'), BigNumber.from('0x2A4A7D79DF231AEA58DF307DD5FB5AB68F0CF17107A881739E9705EC02097554')],

      [[BigNumber.from('0x21E71F2727A6277CE12457973997A101FC0D483FFCFDD0D6C7B57BC98A34E9D0'),BigNumber.from('0x0BD701B9C3B3FF922D8DCBB2A755640AF6F88D4429DE1914EC1A850287C34C46')], BigNumber.from('0x2EE1CA127C1646CD497DA73DE3F0FD5AB042BEFCABF5EA809449473C4629E01B'), BigNumber.from('0x2AA159161C518670E7BCA3EFADBC6B241304B504064A03C1EFF32C87FBCFFCB9')],

      [[BigNumber.from('0x049B48A8D23B401718B2EE7BF28C10153BC47910AB97733427A92176B7661A4D'),BigNumber.from('0x23CAAE93E1D243618874BD64727169FED46283A2172292FDD8B0CCD21DF19503')], BigNumber.from('0x1DCF3A78D3BEC37F280FB10772B51881808BA33ACE9C66704D29702CC1E34C83'), BigNumber.from('0x0EF2E7E14F1908D62652C7D29B8C935F30683E7F494C54093D1EFAD15C30D4E7')]
    ];

    for (const voter of voters) {
      // Add key to the election census
      let [pubKey, s, e] = voter;

      const registerKeyTx = await batravot.registerInCensus(pubKey, [s, e]);
      await registerKeyTx.wait();
      console.log("Updated census with a new key.");
    }

    // We do not submit any proof, as no one voted


    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVotes).to.equal(0);
    expect(election.result.inFavour).to.equal(0);
  });

  it("One vote `For` counted as `Against`", async function () {
    const batravot = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let [pubKey, s, e] = [
      [BigNumber.from('0x1E9DD2CA209DAB588277365B9316257F40199D2DFEDBF4B007F5069FCBD7595D'),BigNumber.from('0x17700552D117EB4E4A2A69DFFC989AE48D0C2375EC30EC7D42B5189EA1CC56DF')], BigNumber.from('0x2A5D9B3DE008C78281332B84E424419067BB59825C835BCABF36DC5F667D6175'), BigNumber.from('0x1932814898D51404A2C6B3DE626CA670C4B1602ABD404A24E00A76C3B057854F')
    ];

    const registerKeyTx = await batravot.registerInCensus(pubKey, [s, e]);
    await registerKeyTx.wait();
    console.log("Registered a key in the census.")

    // Submit a proof for the election vote
    let [proof] = [
      [BigNumber.from('0x0D33F58F7CBF6F726A992B9B8C91D106B5BF645E897C1148FC59EA25DE529154'),BigNumber.from('0x03E0083DA22D66EBEF47316F8951298AB8605985FE39FA2B9C00E9744E311B9D')]
    ];

    // Who voted for whom
    let yes_vote_ids = [] // First person in the census voted yes
    let no_vote_ids = [0] // No one voted no


    await expect(submitElectionProof(batravot, yes_vote_ids, no_vote_ids, proof))
        .to.be.revertedWith("Verification check did not pass");
  });

  it("Proof for different Public Key", async function () {
    const batravot = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let [pubKey, s, e] = [
      [BigNumber.from('0x1E9DD2CA209DAB588277365B9316257F40199D2DFEDBF4B007F5069FCBD7595D'),BigNumber.from('0x17700552D117EB4E4A2A69DFFC989AE48D0C2375EC30EC7D42B5189EA1CC56DF')], BigNumber.from('0x2A5D9B3DE008C78281332B84E424419067BB59825C835BCABF36DC5F667D6175'), BigNumber.from('0x1932814898D51404A2C6B3DE626CA670C4B1602ABD404A24E00A76C3B057854F')
    ];

    const registerKeyTx = await batravot.registerInCensus(pubKey, [s, e]);
    await registerKeyTx.wait();
    console.log("Registered a key in the census.")

    // Submit a proof for the election vote
    let [proof] = [
      [BigNumber.from('0x04B53F3E0409026BDA203C94C3AE70B5C102A19C00B59D6A39CFF90A4E646DA2'),BigNumber.from('0x238D992B2BE53D811F597DF2F0787FCBF04D51A386F4F978676602481399DBE5')]
    ];

    // Who voted for whom
    let yes_vote_ids = [0] // First person in the census voted yes
    let no_vote_ids = [] // No one voted no


    await expect(submitElectionProof(batravot, yes_vote_ids, no_vote_ids, proof))
        .to.be.revertedWith("Verification check did not pass");
  });
});
