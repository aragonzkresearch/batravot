const { expect } = require("chai");
const { ethers } = require("hardhat");
const {BigNumber} = require("ethers");


describe("Testing BatRaVot smart contract", function () {

  async function deployDummyToken() {
    const Token = await ethers.getContractFactory("DummyToken");
    const token = await Token.deploy();

    await token.deployed();
    console.log("Token Address:", token.address);
    return token;
  }

  async function deployElectionContract(token) {
    if (token === undefined) {
      token = await deployDummyToken();
    }

    const BatRaVot = await ethers.getContractFactory("BatRaVot");
    const batravot = await BatRaVot.deploy(token.address);

    await batravot.deployed();
    console.log("Election Handler deployed to:", batravot.address);
    return [batravot, token];
  }

  async function startNewElection(batravot, electionId = BigNumber.from(0)) {
    // Start a new election
    let specifiers = [
      [BigNumber.from('0x0BBB345C74D6BF000AD0F434AAE68F0EBF5E8D0C01B38B3CB7845ECCFE21E191'),BigNumber.from('0x0BA96920952842CDA206AE5BB9E2AD805DCD611B6AF18354E38240FCFCAFFCDC')],[BigNumber.from('0x0950ACA914FBD8FE100C10E06A96E5A49E6E158748F7C55590FA2FC4641A1005'),BigNumber.from('0x008EB64384C56EB92FB492ED1A1D7A0CEE7B97D4AEDB013D3B7F3C9F04802F8D'),BigNumber.from('0x28303E80836E799DF52A2C30150B134D47F33851BA9CF61CBC5D03390020ECEB'),BigNumber.from('0x0A80BB1538E4E8E43A8C71485B182631498BDBC594D3C3997BF37F172685023F')],[BigNumber.from('0x2A61B14964039A3E6B01B3D36C85BCD1FBB792951FE80A2121B0402027E0EFAC'),BigNumber.from('0x26810F950DB6996AC407287C1278BE8D88786176FC1042F76BD6C786801674AD')],[BigNumber.from('0x08F9744D805150402C9CD5E255D6570AC49768DDD2283BC251C37C268FBFA74F'),BigNumber.from('0x09EE2C50FD6CEDB21ADF738360D90EEA72A276D4E41FEC2C40A5DA3539C05F8A'),BigNumber.from('0x14C6A6472BD8C4F20CEEE61B5B83B106E4FE13FF5945A231391E6A34112B140F'),BigNumber.from('0x1CD7CEA43BFC64233338329A76226D71135482F675BB8160644FBEF892385EC4')]
    ];

    let [specifier_yes_g1, specifier_yes_g2, specifier_no_g1, specifier_no_g2] = specifiers;

    const createElectionTx = await batravot.createElection("Test Election", specifier_yes_g1, specifier_yes_g2, specifier_no_g1, specifier_no_g2);
    await createElectionTx.wait();
    console.log("New election created successfully!")
    
    let election = await batravot.elections(electionId);
    console.log("Current election status: ", election.state)
    return election.state;
  }

  async function registerVoters(batravot, token, voters) {
    for (let [tokens, ethPrk, ethAddress, pubKey, signature] of voters) {

      const account = new ethers.Wallet(ethPrk, ethers.provider);
      console.log("Registering voter: ", ethAddress);
      // First, we need to send some tokens to the voter
      const transferTx = await token.transfer(ethAddress, tokens);
      await transferTx.wait();
      // As well as a bit of ETH to pay for gas
      let tx = {
        to: ethAddress,
        // Convert currency unit from ether to wei
        value: ethers.utils.parseEther("0.1"),
      }
      const [owner] = await ethers.getSigners();
      await owner.sendTransaction(tx);
      console.log("Tokens and Ether sent to voter successfully!")


      // Now, we can register the voter, we need to send the registration transaction from the voter's address
      const registerVoterTx = await batravot.connect(account).registerVoter(pubKey, signature);
      await registerVoterTx.wait();
      console.log("Voter registered successfully!")
    }
  }

  async function submitElectionProof(batravot, for_voters, against_voters, proof, electionId = BigNumber.from(0)) {
    const submitVoteWithProofTx = await batravot.submitVotesWithProof(electionId, for_voters, against_voters, proof);
    await submitVoteWithProofTx.wait();
    console.log("Submitted a vote proof for the election.")
  }

  async function closeElectionAndGetResult(batravot, electionId = BigNumber.from(0)) {
    const closeElectionTx = await batravot.closeElection(electionId);
    await closeElectionTx.wait();
    return (await batravot.elections(electionId));
  }

  it("Can deploy Token", async function () {
    const token = await deployDummyToken();
    expect(token.address).to.not.equal("");
  });

  it("Can deploy BatRaVot", async function () {
    const [batravot] = await deployElectionContract();
    expect(batravot.address).to.not.equal("");
  });

  it("Can start new election", async function () {
    const [batravot] = await deployElectionContract();
    expect(await startNewElection(batravot)).to.equal(1);
  });

  it("One correct vote `For`", async function () {
    const [batravot, token] = await deployElectionContract();
    await startNewElection(batravot);

    // Add keys to the election census
    let voters = [
      [10, '0xb10da48cea4c09676b8e0efcd806941465060736032bb898420d0863dca72538', '0xf37d1d2f8b354ec82d821dd1d453b21514b236e6', [BigNumber.from('0x05F0A1D2651B76AE6FC7D466557FE939AF01A0210D631BA766C83A26DE41596F'),BigNumber.from('0x1B567223035188174C9014341FEE0683D8F6CCA267EBCB0C7A5B90FA2A5094FB')], [BigNumber.from('0x2D3E50D2BC4A0A21AB1C66E35372F7B4DE3EC19122077B9483947D42296F4B1E'),BigNumber.from('0x0D2C9F3074C53F12B0A1DB9CCF774BD12A0C86787CC33C01924C18998A875C99')]]
    ];
    await registerVoters(batravot, token, voters);

    // Submit a proof for the election vote
    let [proof] = [
      [BigNumber.from('0x0B1AC2FDA2D3DCD7A2DCB191D0C758EB69334C8D54996313B0C5D8BEA44297F9'),BigNumber.from('0x16A3B432B3F22710653035FBC5E8C14C6FF0312BEB5951931F34F7915989FA76')]
    ];

    // Who voted for whom
    let for_voters = ['0xf37d1d2f8b354ec82d821dd1d453b21514b236e6'] // First person in the census voted yes
    let against_voters = [] // No one voted no


    await submitElectionProof(batravot, for_voters, against_voters, proof);
    console.log("Submitted a vote proof for the election.")

    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVoters).to.equal(1);
    expect(election.result.yesVoters).to.equal(1);
    expect(election.result.totalVotes).to.equal(10);
    expect(election.result.yesVotes).to.equal(10);
  });

  it("10 correct votes `For`", async function () {
    const [batravot, token] = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let voters = [
      [40, '0xb10da48cea4c09676b8e0efcd806941465060736032bb898420d0863dca72538', '0xf37d1d2f8b354ec82d821dd1d453b21514b236e6', [BigNumber.from('0x05F0A1D2651B76AE6FC7D466557FE939AF01A0210D631BA766C83A26DE41596F'),BigNumber.from('0x1B567223035188174C9014341FEE0683D8F6CCA267EBCB0C7A5B90FA2A5094FB')], [BigNumber.from('0x27691E1A1AED47799A0DDDDA055A3093DA2CF972A43623BE3F7D3246A5725E21'),BigNumber.from('0x1262D0BF0BEEDFD314576DC7167DE1F5DB120139AB88D6F3ADE7804E0555D5FC')]],

      [25, '0x5820e2e9368deab5178aff7ee0df09768e48c5b5423f14271360b10a1ba7f1df', '0x3bf393f3c02982e2f5a946ae62741166ebc05a1f', [BigNumber.from('0x1DF6966E68AA63C58ADEC573CB0D0B7C67C0E695B48684FC0153B940CB178634'),BigNumber.from('0x1F902CA50B2DC3272FB609C3330669119E4137A010C8AE898DEE638EC71F0FE1')], [BigNumber.from('0x1D12B35F61C6DB1CAA1812FB04400A1B5910D7D79F8A84672CBA579A92C7629E'),BigNumber.from('0x0EDECD270540A427122D855F02DE3D5051D194259D716D10593FAC8DA2E9BDFE')]],

      [125, '0x238edbd5e52d7619a1e1e9f90b1a9043e2fba672bfef15741d679173da11bd47', '0x018683084de5c7d8203bb193b4703f3d26057f69', [BigNumber.from('0x1975D638EC92C028F49E33ABBDCA941622711F036F67B0DB3FDEF7B7FDA9A56D'),BigNumber.from('0x2FE0F0CB2AAAA99E54C971B0ADE104F057AD2C620A4D73F040F1EECC6EB0F96A')], [BigNumber.from('0x18F8441D47A7A8E3F4BE45330EC097D405A980D666BE8A9B29DCD5EE0FD7917D'),BigNumber.from('0x1C4C95FFCB5E1B13EEFA902CFD510F5F786A5505C731595453952889CEB5758C')]],

      [125, '0x7c4a76f2dd43fe41e6451c222b90c00f92aefb57e63970348c16f57ae1ba8b29', '0xf313e2d16942f9260c8827d047ba7b03b160e793', [BigNumber.from('0x04B84E9F34AD09BAACBCED9620BD2A4B1E0E158D34FC1368BEEF7C54FB5FF1BB'),BigNumber.from('0x28EF0E32C00C4FA06C76B78694D7B238A095B5471E48F9976EB6C9CEDAA075EF')], [BigNumber.from('0x1CFE2E83685D143D84AAF80F28E3B5FE85DE8FF1A2756C6544633ADBECAE9161'),BigNumber.from('0x2809E9C0255E289C0AAA6590F9903E83C3F24518DF8E1F35971F17F19E4AD8F5')]],

      [1, '0x1b00860cce139f4101a6642f4ed0e4e2f4cd8886e24a42d16354a4442fa44538', '0xfd5cf91d1c1efc9400fc38566e3a0de3282ef11f', [BigNumber.from('0x15E04143B38DD381D68246009D42EEE0BAF2577CDD11BB72228E0E46042BD30E'),BigNumber.from('0x0D240C92BF6AD0D54F13F66C6532F29553DDA0C0AED701604E9F678FF201160C')], [BigNumber.from('0x2DF44D022A10823CA0DF890BCC688F7FA23697FF959714C1B5A612D8BF9FFB1B'),BigNumber.from('0x01850EF3A55CAE183D37A3F8B3DC3644A222FBF53BAAE5F00C5A054345707CA9')]],

      [4, '0x5664b719e07220067e46b3fdaa8fa7364536ebb1e43d52416cf9b51b9b038a16', '0x2e6d0ac79f7884e83ec63b258fb60b20e8368773', [BigNumber.from('0x119774EB5240264438BE154DEFA5EF88F37992F849EA0C263E6453ACFED797C7'),BigNumber.from('0x072A2A2653772450DF926DD7637988F1B0E33726D703E391B8996173D2B38E0C')], [BigNumber.from('0x0E28B0D6B60A9640D70916102E762BA1578FDC47A54EE7F7CEA21AA10EAAD298'),BigNumber.from('0x2E4EAC90F78A287C50EEF89B160E02387783CFFB7DD256E4446E451DCAA12423')]],

      [500, '0x8e4612bbfc39b98639fa63b4f4d1c03a4b1c32392e7f4d6a43c300f45bc5fffc', '0x0fc16f1617efdf5244ad18d58980165081ce5364', [BigNumber.from('0x206734E5221920E896A68A8797402C7F5E58663F3838A2033C51E7D19325ED1A'),BigNumber.from('0x03A4C21BE202BB8041E534E5502AD7BB591FC7BBC4DB69A226B3653E2787E025')], [BigNumber.from('0x17C5F546FD2FFC486BA8C7ADF94829D7F95978757BAFC37FD08411B83EF7325B'),BigNumber.from('0x2094D46A0AF399C735B8E64067F2CA08CEDE41A7F5A1B7170F0FA7A48389E57C')]],

      [8, '0x06af23e19711d3941df6e300f0af4ce626323593bc481a610b6c43aa6500127a', '0xeb6df9237d745ad1fee218a3be738e0d72b47441', [BigNumber.from('0x04CDEA134DEB35207767C38970180DDCAF664F01EC39672D760AB89CBCCAB98B'),BigNumber.from('0x1F303E718BE213310CA13EA186848BBC38EEAAA030B0C03A90E820BA7910F747')], [BigNumber.from('0x0AB1997CDA77145E98017C54838798508AAD644E9DC4D4370B690E56773DE6CA'),BigNumber.from('0x116C85836B24E175994840DE0CD9F51F33133145CDE93E92E4DB2CB49CCE4927')]],

      [100, '0x56c9aa562d4ec1ba7ba435a0a06dd62aec5a1f48ba392b3c6f77113a59f549a6', '0x14f47fb74b5a7c822d442f03489049787f947385', [BigNumber.from('0x0E7242472C2C22B67529DAC88AD3D09BB4D311FB77D06E97E0E4520D848401D1'),BigNumber.from('0x14BE415B0C8106FCF185824FE7FAA976DEA6B22C82D22EDA2D00A79D30A0FD1F')], [BigNumber.from('0x01926583A7E9868C2F0F0A51BDD907E3EFAA747E4A7811666130CAC5507497DA'),BigNumber.from('0x13A023930BD009612D264CE3D98A932AA605DC4805EBB0BCB9A7E105381A52D5')]],

      [50, '0xd30ebaefcc325ab7c9324c5896fd7798fd4d46e847368bffe1c006ff7879efe9', '0x9314b1b48fc010f936898d271b1e0695f5491a14', [BigNumber.from('0x1805731AE35AD791F455CBFB74D354C8358E1235550FA91BBBD01C7ABAC9A631'),BigNumber.from('0x09FAD3CA7599518A4938B45290290F3FEF2DD6747EECF6A910C4282E5A44885E')], [BigNumber.from('0x142152F836A50CCC8E3930A9DE368292646F60FB891CEB868525A4030F3F85C3'),BigNumber.from('0x078E5FFA9757D6C8FCC4F67AD981D071379D771ADE3A42A140346309302EB0DF')]]
    ];

    await registerVoters(batravot, token, voters);

    // Submit a proof for the election vote

    // Who voted for whom
    let for_voters =
        ['0xf37d1d2f8b354ec82d821dd1d453b21514b236e6', '0x3bf393f3c02982e2f5a946ae62741166ebc05a1f', '0x018683084de5c7d8203bb193b4703f3d26057f69', '0xf313e2d16942f9260c8827d047ba7b03b160e793', '0xfd5cf91d1c1efc9400fc38566e3a0de3282ef11f', '0x2e6d0ac79f7884e83ec63b258fb60b20e8368773', '0x0fc16f1617efdf5244ad18d58980165081ce5364', '0xeb6df9237d745ad1fee218a3be738e0d72b47441', '0x14f47fb74b5a7c822d442f03489049787f947385', '0x9314b1b48fc010f936898d271b1e0695f5491a14']
    let against_voters =
        [] // No one voted no

    let [proof] = [
      [BigNumber.from('0x1AF44800AFE87C90FD1EB8A595D79398BF9621534A3790DB57F574B78544E538'),BigNumber.from('0x242C540016E87849A3EE74A5EC39F0A065E917CC634D9E56594BD88551812B1E')]
    ];

    await submitElectionProof(batravot, for_voters, against_voters, proof);
    console.log("Submitted a vote proof for the election.")

    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVoters).to.equal(10);
    expect(election.result.yesVoters).to.equal(10);
    expect(election.result.totalVotes).to.equal(978);
    expect(election.result.yesVotes).to.equal(978);

  });

  it("One correct vote `against`", async function () {
    const [batravot, token] = await deployElectionContract();
    await startNewElection(batravot);

    // Add keys to the election census
    let voters = [
      [10, '0xb10da48cea4c09676b8e0efcd806941465060736032bb898420d0863dca72538', '0xf37d1d2f8b354ec82d821dd1d453b21514b236e6', [BigNumber.from('0x05F0A1D2651B76AE6FC7D466557FE939AF01A0210D631BA766C83A26DE41596F'),BigNumber.from('0x1B567223035188174C9014341FEE0683D8F6CCA267EBCB0C7A5B90FA2A5094FB')], [BigNumber.from('0x2D3E50D2BC4A0A21AB1C66E35372F7B4DE3EC19122077B9483947D42296F4B1E'),BigNumber.from('0x0D2C9F3074C53F12B0A1DB9CCF774BD12A0C86787CC33C01924C18998A875C99')]]
    ];
    await registerVoters(batravot, token, voters);

    // Submit a proof for the election vote
    let [proof] = [
      [BigNumber.from('0x27BB1284610C01A2D5E5CB03929E1DC1FD16F6A4966F793E1948D0FC444DC0A7'),BigNumber.from('0x218C57C842D417FCE55F58645620F2435211E89B0613D6DA65321070CD3B21DE')]
    ];

    // Who voted for whom
    let for_voters = [] // No one voted yes
    let against_voters = ['0xf37d1d2f8b354ec82d821dd1d453b21514b236e6'] // First person in the census voted no


    await submitElectionProof(batravot, for_voters, against_voters, proof);
    console.log("Submitted a vote proof for the election.")

    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVoters).to.equal(1);
    expect(election.result.yesVoters).to.equal(0);
    expect(election.result.totalVotes).to.equal(10);
    expect(election.result.yesVotes).to.equal(0);
  });

  it("10 correct votes `against`", async function () {
    const [batravot, token] = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let voters = [
      [40, '0xb10da48cea4c09676b8e0efcd806941465060736032bb898420d0863dca72538', '0xf37d1d2f8b354ec82d821dd1d453b21514b236e6', [BigNumber.from('0x05F0A1D2651B76AE6FC7D466557FE939AF01A0210D631BA766C83A26DE41596F'),BigNumber.from('0x1B567223035188174C9014341FEE0683D8F6CCA267EBCB0C7A5B90FA2A5094FB')], [BigNumber.from('0x27691E1A1AED47799A0DDDDA055A3093DA2CF972A43623BE3F7D3246A5725E21'),BigNumber.from('0x1262D0BF0BEEDFD314576DC7167DE1F5DB120139AB88D6F3ADE7804E0555D5FC')]],

      [25, '0x5820e2e9368deab5178aff7ee0df09768e48c5b5423f14271360b10a1ba7f1df', '0x3bf393f3c02982e2f5a946ae62741166ebc05a1f', [BigNumber.from('0x1DF6966E68AA63C58ADEC573CB0D0B7C67C0E695B48684FC0153B940CB178634'),BigNumber.from('0x1F902CA50B2DC3272FB609C3330669119E4137A010C8AE898DEE638EC71F0FE1')], [BigNumber.from('0x1D12B35F61C6DB1CAA1812FB04400A1B5910D7D79F8A84672CBA579A92C7629E'),BigNumber.from('0x0EDECD270540A427122D855F02DE3D5051D194259D716D10593FAC8DA2E9BDFE')]],

      [125, '0x238edbd5e52d7619a1e1e9f90b1a9043e2fba672bfef15741d679173da11bd47', '0x018683084de5c7d8203bb193b4703f3d26057f69', [BigNumber.from('0x1975D638EC92C028F49E33ABBDCA941622711F036F67B0DB3FDEF7B7FDA9A56D'),BigNumber.from('0x2FE0F0CB2AAAA99E54C971B0ADE104F057AD2C620A4D73F040F1EECC6EB0F96A')], [BigNumber.from('0x18F8441D47A7A8E3F4BE45330EC097D405A980D666BE8A9B29DCD5EE0FD7917D'),BigNumber.from('0x1C4C95FFCB5E1B13EEFA902CFD510F5F786A5505C731595453952889CEB5758C')]],

      [125, '0x7c4a76f2dd43fe41e6451c222b90c00f92aefb57e63970348c16f57ae1ba8b29', '0xf313e2d16942f9260c8827d047ba7b03b160e793', [BigNumber.from('0x04B84E9F34AD09BAACBCED9620BD2A4B1E0E158D34FC1368BEEF7C54FB5FF1BB'),BigNumber.from('0x28EF0E32C00C4FA06C76B78694D7B238A095B5471E48F9976EB6C9CEDAA075EF')], [BigNumber.from('0x1CFE2E83685D143D84AAF80F28E3B5FE85DE8FF1A2756C6544633ADBECAE9161'),BigNumber.from('0x2809E9C0255E289C0AAA6590F9903E83C3F24518DF8E1F35971F17F19E4AD8F5')]],

      [1, '0x1b00860cce139f4101a6642f4ed0e4e2f4cd8886e24a42d16354a4442fa44538', '0xfd5cf91d1c1efc9400fc38566e3a0de3282ef11f', [BigNumber.from('0x15E04143B38DD381D68246009D42EEE0BAF2577CDD11BB72228E0E46042BD30E'),BigNumber.from('0x0D240C92BF6AD0D54F13F66C6532F29553DDA0C0AED701604E9F678FF201160C')], [BigNumber.from('0x2DF44D022A10823CA0DF890BCC688F7FA23697FF959714C1B5A612D8BF9FFB1B'),BigNumber.from('0x01850EF3A55CAE183D37A3F8B3DC3644A222FBF53BAAE5F00C5A054345707CA9')]],

      [4, '0x5664b719e07220067e46b3fdaa8fa7364536ebb1e43d52416cf9b51b9b038a16', '0x2e6d0ac79f7884e83ec63b258fb60b20e8368773', [BigNumber.from('0x119774EB5240264438BE154DEFA5EF88F37992F849EA0C263E6453ACFED797C7'),BigNumber.from('0x072A2A2653772450DF926DD7637988F1B0E33726D703E391B8996173D2B38E0C')], [BigNumber.from('0x0E28B0D6B60A9640D70916102E762BA1578FDC47A54EE7F7CEA21AA10EAAD298'),BigNumber.from('0x2E4EAC90F78A287C50EEF89B160E02387783CFFB7DD256E4446E451DCAA12423')]],

      [500, '0x8e4612bbfc39b98639fa63b4f4d1c03a4b1c32392e7f4d6a43c300f45bc5fffc', '0x0fc16f1617efdf5244ad18d58980165081ce5364', [BigNumber.from('0x206734E5221920E896A68A8797402C7F5E58663F3838A2033C51E7D19325ED1A'),BigNumber.from('0x03A4C21BE202BB8041E534E5502AD7BB591FC7BBC4DB69A226B3653E2787E025')], [BigNumber.from('0x17C5F546FD2FFC486BA8C7ADF94829D7F95978757BAFC37FD08411B83EF7325B'),BigNumber.from('0x2094D46A0AF399C735B8E64067F2CA08CEDE41A7F5A1B7170F0FA7A48389E57C')]],

      [8, '0x06af23e19711d3941df6e300f0af4ce626323593bc481a610b6c43aa6500127a', '0xeb6df9237d745ad1fee218a3be738e0d72b47441', [BigNumber.from('0x04CDEA134DEB35207767C38970180DDCAF664F01EC39672D760AB89CBCCAB98B'),BigNumber.from('0x1F303E718BE213310CA13EA186848BBC38EEAAA030B0C03A90E820BA7910F747')], [BigNumber.from('0x0AB1997CDA77145E98017C54838798508AAD644E9DC4D4370B690E56773DE6CA'),BigNumber.from('0x116C85836B24E175994840DE0CD9F51F33133145CDE93E92E4DB2CB49CCE4927')]],

      [100, '0x56c9aa562d4ec1ba7ba435a0a06dd62aec5a1f48ba392b3c6f77113a59f549a6', '0x14f47fb74b5a7c822d442f03489049787f947385', [BigNumber.from('0x0E7242472C2C22B67529DAC88AD3D09BB4D311FB77D06E97E0E4520D848401D1'),BigNumber.from('0x14BE415B0C8106FCF185824FE7FAA976DEA6B22C82D22EDA2D00A79D30A0FD1F')], [BigNumber.from('0x01926583A7E9868C2F0F0A51BDD907E3EFAA747E4A7811666130CAC5507497DA'),BigNumber.from('0x13A023930BD009612D264CE3D98A932AA605DC4805EBB0BCB9A7E105381A52D5')]],

      [50, '0xd30ebaefcc325ab7c9324c5896fd7798fd4d46e847368bffe1c006ff7879efe9', '0x9314b1b48fc010f936898d271b1e0695f5491a14', [BigNumber.from('0x1805731AE35AD791F455CBFB74D354C8358E1235550FA91BBBD01C7ABAC9A631'),BigNumber.from('0x09FAD3CA7599518A4938B45290290F3FEF2DD6747EECF6A910C4282E5A44885E')], [BigNumber.from('0x142152F836A50CCC8E3930A9DE368292646F60FB891CEB868525A4030F3F85C3'),BigNumber.from('0x078E5FFA9757D6C8FCC4F67AD981D071379D771ADE3A42A140346309302EB0DF')]]
    ];

    await registerVoters(batravot, token, voters);

    // Submit a proof for the election vote

    // Who voted for whom
    let for_voters =
        []
    let against_voters =
        ['0xf37d1d2f8b354ec82d821dd1d453b21514b236e6', '0x3bf393f3c02982e2f5a946ae62741166ebc05a1f', '0x018683084de5c7d8203bb193b4703f3d26057f69', '0xf313e2d16942f9260c8827d047ba7b03b160e793', '0xfd5cf91d1c1efc9400fc38566e3a0de3282ef11f', '0x2e6d0ac79f7884e83ec63b258fb60b20e8368773', '0x0fc16f1617efdf5244ad18d58980165081ce5364', '0xeb6df9237d745ad1fee218a3be738e0d72b47441', '0x14f47fb74b5a7c822d442f03489049787f947385', '0x9314b1b48fc010f936898d271b1e0695f5491a14']

    let [proof] = [
      [BigNumber.from('0x20010F657AB74221F786D9ECFE09103C50665CFAFE8BA8E7801C1E321FB3B672'),BigNumber.from('0x1EDFB82CE6B740F9D2FA3598A61A5DB637C480FC3E27AB7C5AD4D92EF67A8ED2')]
    ];

    await submitElectionProof(batravot, for_voters, against_voters, proof);
    console.log("Submitted a vote proof for the election.")

    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVoters).to.equal(10);
    expect(election.result.yesVoters).to.equal(0);
    expect(election.result.totalVotes).to.equal(978);
    expect(election.result.yesVotes).to.equal(0);

  });

  it("1 correct vote `For` and 1 correct vote `against`", async function () {
    const [batravot, token] = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let voters = [
      [40, '0xb10da48cea4c09676b8e0efcd806941465060736032bb898420d0863dca72538', '0xf37d1d2f8b354ec82d821dd1d453b21514b236e6', [BigNumber.from('0x05F0A1D2651B76AE6FC7D466557FE939AF01A0210D631BA766C83A26DE41596F'),BigNumber.from('0x1B567223035188174C9014341FEE0683D8F6CCA267EBCB0C7A5B90FA2A5094FB')], [BigNumber.from('0x27691E1A1AED47799A0DDDDA055A3093DA2CF972A43623BE3F7D3246A5725E21'),BigNumber.from('0x1262D0BF0BEEDFD314576DC7167DE1F5DB120139AB88D6F3ADE7804E0555D5FC')]],

      [25, '0x5820e2e9368deab5178aff7ee0df09768e48c5b5423f14271360b10a1ba7f1df', '0x3bf393f3c02982e2f5a946ae62741166ebc05a1f', [BigNumber.from('0x1DF6966E68AA63C58ADEC573CB0D0B7C67C0E695B48684FC0153B940CB178634'),BigNumber.from('0x1F902CA50B2DC3272FB609C3330669119E4137A010C8AE898DEE638EC71F0FE1')], [BigNumber.from('0x1D12B35F61C6DB1CAA1812FB04400A1B5910D7D79F8A84672CBA579A92C7629E'),BigNumber.from('0x0EDECD270540A427122D855F02DE3D5051D194259D716D10593FAC8DA2E9BDFE')]],
    ];

    await registerVoters(batravot, token, voters);

    // Submit a proof for the election vote

    // Who voted for whom
    let for_voters =
        ['0xf37d1d2f8b354ec82d821dd1d453b21514b236e6']
    let against_voters =
        ['0x3bf393f3c02982e2f5a946ae62741166ebc05a1f']

    let [proof] = [
      [BigNumber.from('0x1E31AD156C6C32C4ACF34C47267780B1C44F2D939493BB9B7E7908FCA7CE2467'),BigNumber.from('0x2EFF584FED0A405FC606D1911837DB29C5A5B6EE1FB8E9C928C9214175F10697')]
    ];

    await submitElectionProof(batravot, for_voters, against_voters, proof);
    console.log("Submitted a vote proof for the election.")

    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVoters).to.equal(2);
    expect(election.result.yesVoters).to.equal(1);
    expect(election.result.totalVotes).to.equal(65);
    expect(election.result.yesVotes).to.equal(40);
  });

  it("2 correct vote `For` and 1 correct vote `against`", async function () {
    const [batravot, token] = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let voters = [
      [40, '0xb10da48cea4c09676b8e0efcd806941465060736032bb898420d0863dca72538', '0xf37d1d2f8b354ec82d821dd1d453b21514b236e6', [BigNumber.from('0x05F0A1D2651B76AE6FC7D466557FE939AF01A0210D631BA766C83A26DE41596F'),BigNumber.from('0x1B567223035188174C9014341FEE0683D8F6CCA267EBCB0C7A5B90FA2A5094FB')], [BigNumber.from('0x27691E1A1AED47799A0DDDDA055A3093DA2CF972A43623BE3F7D3246A5725E21'),BigNumber.from('0x1262D0BF0BEEDFD314576DC7167DE1F5DB120139AB88D6F3ADE7804E0555D5FC')]],

      [25, '0x5820e2e9368deab5178aff7ee0df09768e48c5b5423f14271360b10a1ba7f1df', '0x3bf393f3c02982e2f5a946ae62741166ebc05a1f', [BigNumber.from('0x1DF6966E68AA63C58ADEC573CB0D0B7C67C0E695B48684FC0153B940CB178634'),BigNumber.from('0x1F902CA50B2DC3272FB609C3330669119E4137A010C8AE898DEE638EC71F0FE1')], [BigNumber.from('0x1D12B35F61C6DB1CAA1812FB04400A1B5910D7D79F8A84672CBA579A92C7629E'),BigNumber.from('0x0EDECD270540A427122D855F02DE3D5051D194259D716D10593FAC8DA2E9BDFE')]],

      [125, '0x238edbd5e52d7619a1e1e9f90b1a9043e2fba672bfef15741d679173da11bd47', '0x018683084de5c7d8203bb193b4703f3d26057f69', [BigNumber.from('0x1975D638EC92C028F49E33ABBDCA941622711F036F67B0DB3FDEF7B7FDA9A56D'),BigNumber.from('0x2FE0F0CB2AAAA99E54C971B0ADE104F057AD2C620A4D73F040F1EECC6EB0F96A')], [BigNumber.from('0x2DA2D2BC406202ECC0DE8A2DDACA19C4894880E1F2D937595154484E680F39FF'),BigNumber.from('0x084688ED50552C6B4EFA8173518FF08A03BABCE9001341C43C5DACF81D3FC39E')]]
    ];

    await registerVoters(batravot, token, voters);

    // Submit a proof for the election vote

    // Who voted for whom
    let for_voters =
        ['0xf37d1d2f8b354ec82d821dd1d453b21514b236e6', '0x018683084de5c7d8203bb193b4703f3d26057f69']
    let against_voters =
        ['0x3bf393f3c02982e2f5a946ae62741166ebc05a1f']

    let [proof] = [
      [BigNumber.from('0x2F98570A5F66E2D0E3DCBFDB45DD70C1C89CA37807E2B6FD0989F5C46FF65182'),BigNumber.from('0x1FB92399D806AC9BCA233F1937E4CA07698938273848C9AB70113FA3A5A95490')]
    ];

    await submitElectionProof(batravot, for_voters, against_voters, proof);
    console.log("Submitted a vote proof for the election.")

    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVoters).to.equal(3);
    expect(election.result.yesVoters).to.equal(2);
    expect(election.result.totalVotes).to.equal(190);
    expect(election.result.yesVotes).to.equal(165);
  });

  it("16 correct vote `For` and 19 correct vote `against`", async function () {
    const [batravot, token] = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let voters = [
      [40, '0xb10da48cea4c09676b8e0efcd806941465060736032bb898420d0863dca72538', '0xf37d1d2f8b354ec82d821dd1d453b21514b236e6', [BigNumber.from('0x05F0A1D2651B76AE6FC7D466557FE939AF01A0210D631BA766C83A26DE41596F'),BigNumber.from('0x1B567223035188174C9014341FEE0683D8F6CCA267EBCB0C7A5B90FA2A5094FB')], [BigNumber.from('0x20C6DDB8D8BCFE8D229B3E0CC2FB96379194521EA636722B2A5E6797C2ABA7DF'),BigNumber.from('0x287EBD2448A2AE908E54EEF264F36BB1DE32A007D6EC41AD803EF7A746AC1451')]],

      [25, '0x5820e2e9368deab5178aff7ee0df09768e48c5b5423f14271360b10a1ba7f1df', '0x3bf393f3c02982e2f5a946ae62741166ebc05a1f', [BigNumber.from('0x1DF6966E68AA63C58ADEC573CB0D0B7C67C0E695B48684FC0153B940CB178634'),BigNumber.from('0x1F902CA50B2DC3272FB609C3330669119E4137A010C8AE898DEE638EC71F0FE1')], [BigNumber.from('0x006FB6574D0E32AB6CC034C24D0B7FC9CBDED185604511FF2E0AFEF93C067ED4'),BigNumber.from('0x2CAE2D23415EA8454C07F7F2948A6D0EC28F3484104912C6CDCA7132BF0D1299')]],

      [125, '0x238edbd5e52d7619a1e1e9f90b1a9043e2fba672bfef15741d679173da11bd47', '0x018683084de5c7d8203bb193b4703f3d26057f69', [BigNumber.from('0x1975D638EC92C028F49E33ABBDCA941622711F036F67B0DB3FDEF7B7FDA9A56D'),BigNumber.from('0x2FE0F0CB2AAAA99E54C971B0ADE104F057AD2C620A4D73F040F1EECC6EB0F96A')], [BigNumber.from('0x01BF3DB8FB5F7D6C75AA0DF41895176ED69A483B2CF819AB0A46BE2572BD0848'),BigNumber.from('0x00236ED50EDFBE4FCF87E94F52B67FFBF5B445B886C46500149D07B393ED4201')]],

      [125, '0x7c4a76f2dd43fe41e6451c222b90c00f92aefb57e63970348c16f57ae1ba8b29', '0xf313e2d16942f9260c8827d047ba7b03b160e793', [BigNumber.from('0x04B84E9F34AD09BAACBCED9620BD2A4B1E0E158D34FC1368BEEF7C54FB5FF1BB'),BigNumber.from('0x28EF0E32C00C4FA06C76B78694D7B238A095B5471E48F9976EB6C9CEDAA075EF')], [BigNumber.from('0x2FF5970366B6DF208CA40E1852B3AC3BD964A6ADB341ACD26E3DD6F226F8CECC'),BigNumber.from('0x20F6C72770C89DA038BC66593A3D0C4563094B247782DB87F8BBD604D460FAC7')]],

      [1, '0x1b00860cce139f4101a6642f4ed0e4e2f4cd8886e24a42d16354a4442fa44538', '0xfd5cf91d1c1efc9400fc38566e3a0de3282ef11f', [BigNumber.from('0x15E04143B38DD381D68246009D42EEE0BAF2577CDD11BB72228E0E46042BD30E'),BigNumber.from('0x0D240C92BF6AD0D54F13F66C6532F29553DDA0C0AED701604E9F678FF201160C')], [BigNumber.from('0x26DFACA4ED54A339E3F8D60F639B40BADAA0602F620D42A23D4DBABDAF8D83F2'),BigNumber.from('0x20ECE94FB4978C308BD73B923AD27003A7D5EABBD63AFD6D46B290B9F6B83865')]],

      [4, '0x5664b719e07220067e46b3fdaa8fa7364536ebb1e43d52416cf9b51b9b038a16', '0x2e6d0ac79f7884e83ec63b258fb60b20e8368773', [BigNumber.from('0x119774EB5240264438BE154DEFA5EF88F37992F849EA0C263E6453ACFED797C7'),BigNumber.from('0x072A2A2653772450DF926DD7637988F1B0E33726D703E391B8996173D2B38E0C')], [BigNumber.from('0x19D18D1D52ACB84A06DE91DB6A121E5AF9BD5D58B2DA5CE75954E472C61642DE'),BigNumber.from('0x10443B08BD4CB36AE9C488356A14FF2743FE84EC01E7C7BB780146AD16D4EC6C')]],

      [500, '0x8e4612bbfc39b98639fa63b4f4d1c03a4b1c32392e7f4d6a43c300f45bc5fffc', '0x0fc16f1617efdf5244ad18d58980165081ce5364', [BigNumber.from('0x206734E5221920E896A68A8797402C7F5E58663F3838A2033C51E7D19325ED1A'),BigNumber.from('0x03A4C21BE202BB8041E534E5502AD7BB591FC7BBC4DB69A226B3653E2787E025')], [BigNumber.from('0x192C4C0B82ABF65B5FAAEEC3BC8C66040A4C204BDA0050A4D9EB3A11FA4A4EC7'),BigNumber.from('0x27DF6A4E475079AFA9D184A49D8AE3DC505AFC69F402A94E293631A37523DC50')]],

      [8, '0x06af23e19711d3941df6e300f0af4ce626323593bc481a610b6c43aa6500127a', '0xeb6df9237d745ad1fee218a3be738e0d72b47441', [BigNumber.from('0x04CDEA134DEB35207767C38970180DDCAF664F01EC39672D760AB89CBCCAB98B'),BigNumber.from('0x1F303E718BE213310CA13EA186848BBC38EEAAA030B0C03A90E820BA7910F747')], [BigNumber.from('0x0BA5C47993059CAF8201FDC32334F285C1E13483CCEA6F03B84BDB65270CE65A'),BigNumber.from('0x03B8EA01CFB4AF0BD4FDF5FB15226CC8A467881C5E8A30B6729B480DBB7D0A13')]],

      [100, '0x56c9aa562d4ec1ba7ba435a0a06dd62aec5a1f48ba392b3c6f77113a59f549a6', '0x14f47fb74b5a7c822d442f03489049787f947385', [BigNumber.from('0x0E7242472C2C22B67529DAC88AD3D09BB4D311FB77D06E97E0E4520D848401D1'),BigNumber.from('0x14BE415B0C8106FCF185824FE7FAA976DEA6B22C82D22EDA2D00A79D30A0FD1F')], [BigNumber.from('0x13D02225C51D70EEC4E776DC0FDFA6E2B5AF45C81590E08CC79B360F62AF1064'),BigNumber.from('0x02BD05D2717A0C38D33AEFD7C67E8687E9E1E6301BFB9EDF2AA0EDD412707828')]],

      [50, '0xd30ebaefcc325ab7c9324c5896fd7798fd4d46e847368bffe1c006ff7879efe9', '0x9314b1b48fc010f936898d271b1e0695f5491a14', [BigNumber.from('0x1805731AE35AD791F455CBFB74D354C8358E1235550FA91BBBD01C7ABAC9A631'),BigNumber.from('0x09FAD3CA7599518A4938B45290290F3FEF2DD6747EECF6A910C4282E5A44885E')], [BigNumber.from('0x2B0A176A281C091083184F6EE9117F3E313F6F32AEFA6DBFA40AB5232E86CF44'),BigNumber.from('0x068B9506302D777887F32F80EE3E39F7368A7D93D1146866137CB3ED3B072D6A')]],

      [25, '0xdb7cdbb4af8561a65cf87f574d8e9091f19056d422f7449d9ebf36fe7e4fd678', '0x1fbf00b5899446014ed94ac81d229bfb30395373', [BigNumber.from('0x0562D6E5627E3EB5DA242380FE460B02A2321938B7BF9ABB69BBCB4C5D28D457'),BigNumber.from('0x1EE0B6059BC6F83EB3E305A179A9D22AE0B9D26CFE5FA581CE051C9908F0246A')], [BigNumber.from('0x00976729720C16F8B52E169D8EBC1A1283D1ED897C1F4897FC92710211882404'),BigNumber.from('0x0CB8FF3A43756A1A16CE7F8F6098FD24CFADFFCE4DCFA9CE3AE9C86CA10B9226')]],

      [10, '0x2d7402cd116cad100bb69378e48d953d5a1e60bc96a6a66bab4a39d59c56aa5d', '0x3dee7c9934c4c8815a277f61caf0a0ef9a1cee2d', [BigNumber.from('0x0BD9D1B799161691CE37914F987998FD5E6D04B416E1122E5A5FEB4A976F5E1A'),BigNumber.from('0x1A9A84D4B7102F1ACF1B2DECEEE73F5835D4FC64181FAE9DF3C8FF2B6157E829')], [BigNumber.from('0x20ED753B0C5875BD7A5AD3C990DE2C6E7E7D306322DA81F801822B3762C98D79'),BigNumber.from('0x052366C8780A7A9D7208A8A93AD7FFE2BB49CCF5E43438E60730E212C3AD18D6')]],

      [200, '0xc1db2841ee61178f90bde8969ea3be0f6f3a79464d819f041828dee3f018d231', '0x01d8f1fa2df8baf5eef790da7ea8b659e2e6f3cc', [BigNumber.from('0x003E6C935054095A3B5B5A684150842CD0DA9451A235A7362F7C9D250E342CDE'),BigNumber.from('0x0F4288D5837A1234DC38B78323FAF99354009561D73EE39FDE6A30EBA3B18B44')], [BigNumber.from('0x25884873251BF88231444E97D0D71EA5C0AC9C866ACAAD83C1A7A80E1A46C6C2'),BigNumber.from('0x1E86857A5E723BDE8A6B217F351EA06F1BC4F8AB661EC140AC5216670DB30B06')]],

      [1, '0x327fbfaf8e7fe55cce8978ef5d02de40a12a061f806dc6fb82706fa8a28afc89', '0xe16610703819d9b90945f4bc0a79704c2a95f843', [BigNumber.from('0x0183D962F1500AE621F3E9434998F20934571E32D0A6AE43BEBC824831986AE1'),BigNumber.from('0x161A742A9C1808C4AADE5F7ECBB1E7249BC0B34EAA992F39774782B1B3324B7E')], [BigNumber.from('0x09079A5C962DE54EDFBDDF28F6CFCF4EA852FD3AB32F599B9619DC620DD76D7C'),BigNumber.from('0x1DADC5317AE018648008285DBFBD75E864738B657B0BCA69169807C0FEDFD476')]],

      [2, '0x6bae4e41ffb5cdec27c1cd44e02197b4463f3e236a911ce59266ac65d2b7b17a', '0x89a8308a18f3a66a37b4ae0e8a0d615275be408a', [BigNumber.from('0x1C2DA49F8E5978D8515CB6E01719505F51FD6A15AD004756251D133094BE2D7A'),BigNumber.from('0x1BF9E2FFD7DDF0F0A033F6BC599601E9A444C21EC981580FE2521229C89F4099')], [BigNumber.from('0x027BF57E42BAFD2280A598C7EE453C4A669D9604B341D87E554B1EE2D3487530'),BigNumber.from('0x2960CED5ED5D5761F7AB20F9A1F52E4EA039E70968255D5F6E33CB271B992077')]],

      [1, '0x068dd553d84efbdc0ae4bb3211304ff51519162be1d768ed6452ada8409a1920', '0xc32803277c8ab13a4d6804e5bbc0241024dd3277', [BigNumber.from('0x1F0D5618B3F7A7920D312BBEED626280570B7B58C519104FD3B952878BB30D91'),BigNumber.from('0x225F5272DE80824F50E6415E72B054D974DA40D3626693197FB499F425531446')], [BigNumber.from('0x1AD9E6FDA62A32C60B22201556C0141C6211EDA1A8E90A01E5B65C0CEDEEF812'),BigNumber.from('0x145239FBF3A8EC055360BB61BA11E742E2A6D1825B228934819D3A240C88FFF5')]],

      [2, '0xc62cc736f00690957d66f16b3e0c04b8481ddaa4cfceecc7f63615ff637789f6', '0x14412704e862af68f1b99f4aabd86f5165e72ad7', [BigNumber.from('0x26AC4580A1B27F0E0606DA14718927721CA5D906B598561816171E3FF9655DEB'),BigNumber.from('0x2A0C845E6701319567275F2F401B89F0C924B26ECA74B14E33BA044ABF2E205C')], [BigNumber.from('0x076DF1528B57F3BEDD43444F79D85A186EC08591849FEEFB1D7EB7D4534CAB38'),BigNumber.from('0x1F49FF58AD7051651F0BBEA01CD64D71EA8384111910EE27F908DE6915A7B271')]],

      [125, '0xcdebfb7ce5a6dba99f4bf2d8a3bb206d62a35411ae756e6f5f54bdae36e279a6', '0x62f9e8484260ac37ac1b7b1b4a8983db4084e1ed', [BigNumber.from('0x1DF05CADED3E0DE2E1D2499DA0FDC43B609ABDFC844B95AA4A96C178AABA12FA'),BigNumber.from('0x09EFCCACF4A79CC9280EA21D2D14F5C9FCDBB4B5BCCAE75A96F66C7CCC5E0121')], [BigNumber.from('0x012923B35E04747DBF4E1B7C920F88B80F9B69FC5198A24FDC235DFC320940F6'),BigNumber.from('0x15DC23B392266001E621588F54FD3F2261AA06A202E30BF624BB04355538D069')]],

      [20, '0xb20c084c2d33210974f5fea28d0915cfc2a02990c6484382ba1db39368ad9905', '0x2032670ff5a26e5e48d447cb682b85f4e2f4d2c1', [BigNumber.from('0x0FA6CCE833E6B2CD41E57C9CF1ABC467CAB9D2755F9247BFCAA78E2FBEB7CED4'),BigNumber.from('0x25F207EF15CCF0C395C028DBA8C78E54942F85BB9EF3A36D6B97EF97FB8A31D6')], [BigNumber.from('0x09567D06EB58A01F0A68128656D67CFD487001558C92B361BBC639E2E5C77D3E'),BigNumber.from('0x2EB0D15E68B30B00EC5CA5D99D1EA2A5C2F142ADD5ABE39FF4CFD2082BC05383')]],

      [500, '0xcaa2c639a6da46c622d405686d9af7fbf8d3023f43fa5dd9e8c988e5220fb09d', '0x447913f3bea6ba399eae3f8875754a421375beb7', [BigNumber.from('0x2F2F05D5AC1964599882D9BD3B6BB77E7E748F40FC6027ABFF67B9207B48DF8C'),BigNumber.from('0x12F8340348330AC8F3740AB8455744766CB9901F25BEFA8BE3F5A286533289A9')], [BigNumber.from('0x169B285F05A3963F80FFC1DEFA128CD31F286C39A74B70C89928F9D21A1F1C57'),BigNumber.from('0x04444A062E28879288F5F8D9DC02B247990D6633B65E900BB7C5F83F313F67B9')]],

      [1, '0x666e5a8120cb48a940ebe66600ab7ef2ca3f3fdccac772c995f62ad10629f95e', '0xef88b16ec48bd47168b863f7765500d50df34e06', [BigNumber.from('0x06140F1058466C6AAEB64BB08939787FEED0AC33C5D9528EFA2AE9A148D087E4'),BigNumber.from('0x2150CCB4CED0B0F0137F8379051573312AF2344649C1554B13430CEB3D81BB4F')], [BigNumber.from('0x12390C9397B068323462156205B1DAD574BA047C342F5DDAEBBA1229BD93A44F'),BigNumber.from('0x07B8CB9C1124F645908C08A2F91B89DE965E2A54546C929AC754901CD4A9B37C')]],

      [5, '0x139c828db6f395e892beac5fd2fcd02d9df555fd0c048424df97c65d8753fbfa', '0x7e16241a420f29d808f29d974caecbb58709afa7', [BigNumber.from('0x066403762826E3CEB5259B05EF8A8D17E93D794F7E851D3B1E69B8C725B8F68F'),BigNumber.from('0x0C287A38F4D9B5C63FD500E7A52AF7B38E956777C85E1CC392ED593AF8059EFD')], [BigNumber.from('0x1035A14AF6A8A60663D400F1C67CAA9C9CBA4EB5C2EC86F7C377FB7F3C222800'),BigNumber.from('0x057DD7DC30AB9E72724EFCAF9B295C7730721AE970EFBD34E3CF3C3E45B9154F')]],

      [8, '0x6688d87deab52944022017ff455bd24b5f8c35c1f0c538d72d4bfee403715dc3', '0x8c6b0c7f0828ce78e9c4511b2294fb438fb711be', [BigNumber.from('0x2264A914D4AACFAE3627F69386DAF50D2EA4E72B1BE7F8306A9E01E3A9EAFD51'),BigNumber.from('0x04EF318CCBF0609A991290E9C8DEE72E841E57D66CAAB527E1976CF57C743BCA')], [BigNumber.from('0x2722FF79801D8022A693D909B9FAFF2F8A3234067067F33307812E7CCF4418CE'),BigNumber.from('0x10FF6273E3C66D262775F87B9AA82EA5381387DA1105DEC277217ACB8CF2F7E7')]],

      [500, '0x6eb652dc4ca234ada6b5157e77dcfa7c2af23eeb08110a13937a73c3bb3a27d3', '0xbe5a14173cd9c9dc7c3da4cfd09baab66b50207a', [BigNumber.from('0x09482F18E2CBA6A7C9F29B6F6BDB2F0E057139D9AD74D6148A459ED9391BBC90'),BigNumber.from('0x2AA15707F11F8CD9961E20F70C60C2784C0B9B31AC6E2A8CAE00BBDDD1F4C3DD')], [BigNumber.from('0x1921068D979A1C0F52627AE894D8C2A6B55386CBA93C12270E40C8C1D7CE9FE8'),BigNumber.from('0x18A560AD7FCC1F06BCA499160D8EA015C4DF3A9F07FC55A28327D98966375F4A')]],

      [200, '0x4c98bb7c8c1ba5ff196aea5950057996d5ee3b544e9a119fcdf580dfbf1772e2', '0x7dd287dd245658a5dff1d902b16d91acbdb76078', [BigNumber.from('0x2BC492A62C5EE75E0485AC00D558723A6E17653029C7C582FE0D6A5CD28C0BE5'),BigNumber.from('0x12D5E41DBDA91C2CE003B7DD221F9A2E1E64AA4F5E0D76BBA162C69C8E334CC0')], [BigNumber.from('0x09996538182675A8EFBA45F48BB55F2ED7CC67CEAE3320FC329F3B585A856CE6'),BigNumber.from('0x02EC0123CF33FF0D84D2984B0E24885B8C62E9E9A581ECD50315B7B2C75BAD7A')]],

      [20, '0x097d41cbb297d69cc5df4ec8e6506cd9c9414093c7fb279542a0d9b24aed9546', '0x957918f32bf0da0e54899884c7a4f8e5a3b4058e', [BigNumber.from('0x0834D4DE5590310AED4FCE19C6C37D4EAC6F497364D613040995048367DD7369'),BigNumber.from('0x129DC56FA1B3616F8E3F9870A18308B916AC9620DE25942EA70232E6B39A6F63')], [BigNumber.from('0x2F82A66C772EAD460CECE420B022D355426EFC3CFDD43E184CDB2E6B65164E5E'),BigNumber.from('0x0AB7E95070188B9A7D67EBC10722C66221820311A0580106C564FF4BEE752E00')]],

      [100, '0xf4d150c5f510f0c7776c85bc7cf6dfe95ddde9c55f1ea8995281d2579b2ed10d', '0xe7e000ca4b36ced55e9497110eab875e581b23be', [BigNumber.from('0x1EC608C3379D76150E61A89452280D929F36B383429F8CA3FB7F8FD69AAD5513'),BigNumber.from('0x1A47F016EE4F825B95B05094085667CEF2C40BA0FCDF75B4F0BC9254F79C9A6E')], [BigNumber.from('0x150E709CF3A5BC660CB7D799BC0F6E5F1E6F9231D4FC58EF0673C3F77A8BAB95'),BigNumber.from('0x040E3423842FB516DE7838E37C5FC040EF4965EA892F4E0551C0DF7D79C07187')]],

      [2, '0x68c5938f907e46dfa3fd9ace5d8d860ca4fc9347d600e61ba815ac0938035577', '0xd391535c139c61adae8b44418d283b8149b75af1', [BigNumber.from('0x1C43073EB427A97F533A496A78A78AB15C1CB00343E16F0269D3D824691C01E0'),BigNumber.from('0x2A378A8E7128402B5356CE1DC46C55B3A3EB78DEC2E67DFA11C3F9D2FA9D436F')], [BigNumber.from('0x2C172E2CDF17492040F613315B2D86B1C771FADAADF5EEB17C697228CB4F99FE'),BigNumber.from('0x29E540978849541E2DE07AA1726141BF2C62D9225CBAB36E935586FF8563A3AD')]],

      [2, '0x5bcb2d6ac643466ae44b6e48a54ddbd45861bbde98b4ab76d798a3e6034c6011', '0xa5302c574ff2e64086a27c93038bdd41573875ac', [BigNumber.from('0x03F3BA9639B10146BC142D4AD1A2277B5C40AB84E95183617C9F296421AC7B16'),BigNumber.from('0x2C0492602EE8F0A0319EA03A926CC86F80833974BBFD0F04C02F9A21A46855B0')], [BigNumber.from('0x1AA65DE867294F7C58BC511C6339E898A6CC1DC2B592C10008624596240D62B2'),BigNumber.from('0x106B0A9347629E64574A7E415DCD059ECAEFC39A139A8790C768693A3ABEF9D8')]],

      [100, '0xaf5409116a09675f18149e732d9dab776f58818a8a7b0f7baaa7cba78db21fae', '0x7082b8aa50dfdafa0d5e05bbaf7164e49724fa5f', [BigNumber.from('0x24202E370438C9731CB84ACF05C0AF276347967BFE07D7583EC76E69C51CDECB'),BigNumber.from('0x2599EF328E0B44F9770FEA9BD5CAD4066BA224DDA6CA15B1B7B72C1A3F69516C')], [BigNumber.from('0x17C36726571F1821C0CDDAAE5C9584500AD4F08B572644E12B752D58E5D65025'),BigNumber.from('0x1C652E080A946D8B08034DDEF52EAEF08CA35F2C41E0A139325D1BE8703C85A3')]]
    ];

    await registerVoters(batravot, token, voters);

    // Submit a proof for the election vote

    // Who voted for whom
    let for_voters =
        ['0xf37d1d2f8b354ec82d821dd1d453b21514b236e6', '0x018683084de5c7d8203bb193b4703f3d26057f69', '0xfd5cf91d1c1efc9400fc38566e3a0de3282ef11f', '0x2e6d0ac79f7884e83ec63b258fb60b20e8368773', '0xeb6df9237d745ad1fee218a3be738e0d72b47441', '0x01d8f1fa2df8baf5eef790da7ea8b659e2e6f3cc', '0xe16610703819d9b90945f4bc0a79704c2a95f843', '0xc32803277c8ab13a4d6804e5bbc0241024dd3277', '0x447913f3bea6ba399eae3f8875754a421375beb7', '0x7e16241a420f29d808f29d974caecbb58709afa7', '0x8c6b0c7f0828ce78e9c4511b2294fb438fb711be', '0x7dd287dd245658a5dff1d902b16d91acbdb76078', '0x957918f32bf0da0e54899884c7a4f8e5a3b4058e', '0xe7e000ca4b36ced55e9497110eab875e581b23be', '0xa5302c574ff2e64086a27c93038bdd41573875ac', '0x7082b8aa50dfdafa0d5e05bbaf7164e49724fa5f']
    let against_voters =
        ['0x3bf393f3c02982e2f5a946ae62741166ebc05a1f', '0xf313e2d16942f9260c8827d047ba7b03b160e793', '0x0fc16f1617efdf5244ad18d58980165081ce5364', '0x14f47fb74b5a7c822d442f03489049787f947385', '0x9314b1b48fc010f936898d271b1e0695f5491a14', '0x1fbf00b5899446014ed94ac81d229bfb30395373', '0x3dee7c9934c4c8815a277f61caf0a0ef9a1cee2d', '0x89a8308a18f3a66a37b4ae0e8a0d615275be408a', '0x14412704e862af68f1b99f4aabd86f5165e72ad7', '0x62f9e8484260ac37ac1b7b1b4a8983db4084e1ed', '0x2032670ff5a26e5e48d447cb682b85f4e2f4d2c1', '0xef88b16ec48bd47168b863f7765500d50df34e06', '0xbe5a14173cd9c9dc7c3da4cfd09baab66b50207a', '0xd391535c139c61adae8b44418d283b8149b75af1']

    let [proof] = [
      [BigNumber.from('0x1D7DB90F35F84843CBCAA3CF65801B6DBB6E84F7C5DABD3C5972AC2252402AA9'),BigNumber.from('0x0DDA393E7D55E223F6C16885203021D543FB428F3045986C345BB497C299A9D2')]
    ];

    await submitElectionProof(batravot, for_voters, against_voters, proof);
    console.log("Submitted a vote proof for the election.")

    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVoters).to.equal(30);
    expect(election.result.yesVoters).to.equal(16);
  });

  it("Can submit multiple proofs", async function () {
    const [batravot, token] = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let voters = [
      [40, '0xb10da48cea4c09676b8e0efcd806941465060736032bb898420d0863dca72538', '0xf37d1d2f8b354ec82d821dd1d453b21514b236e6', [BigNumber.from('0x05F0A1D2651B76AE6FC7D466557FE939AF01A0210D631BA766C83A26DE41596F'),BigNumber.from('0x1B567223035188174C9014341FEE0683D8F6CCA267EBCB0C7A5B90FA2A5094FB')], [BigNumber.from('0x27691E1A1AED47799A0DDDDA055A3093DA2CF972A43623BE3F7D3246A5725E21'),BigNumber.from('0x1262D0BF0BEEDFD314576DC7167DE1F5DB120139AB88D6F3ADE7804E0555D5FC')]],

      [40, '0xc51b8a31c98b9fe13065b485c9f8658c194c430843570ccac2720a3b30b47adb', '0xc16aafcba07b1a50ec771125d65957edbf05817f', [BigNumber.from('0x1CE0198AA6D5BF8BC7AFA5A2D3B04FAB0F7FD4266D17202357F71CEE58FC01B7'),BigNumber.from('0x010760788D034A3F66700A3F3BCCD0389E1A7C502B6228B8A6F3053960592083')], [BigNumber.from('0x10439B0E95EF33FC806DC0EE60E2066E4D46C11805AC97BF115A852E4F2EBF83'),BigNumber.from('0x00CB79118E9197E22234437A4C166CB072DE59F2357951D8FB5582CD1C081BDC')]]
    ];

    await registerVoters(batravot, token, voters);

    // Submit a proof for the election vote

    // Proof 1:

    // Who voted for whom
    let for_voters_1 =
        ['0xf37d1d2f8b354ec82d821dd1d453b21514b236e6']
    let against_voters_1 =
        []

    let [proof_1] = [
      [BigNumber.from('0x0B1AC2FDA2D3DCD7A2DCB191D0C758EB69334C8D54996313B0C5D8BEA44297F9'),BigNumber.from('0x16A3B432B3F22710653035FBC5E8C14C6FF0312BEB5951931F34F7915989FA76')]
    ];

    await submitElectionProof(batravot, for_voters_1, against_voters_1, proof_1);
    console.log("Submitted a vote proof 1 for the election.")

    // Proof 2:

    // Who voted for whom
    let for_voters_2 =
        ['0xc16aafcba07b1a50ec771125d65957edbf05817f']
    let against_voters_2 =
        []

    let [proof_2] = [
      [BigNumber.from('0x02669ACB106091348BD856730FBE82A96BF3C57EF72CC885D6622EC2BABC1384'),BigNumber.from('0x0BCB7CD63F4639637078063E55EA35E8BCCB90AC1E08DCD562AD6F10E6B7CFCB')]
    ];

    await submitElectionProof(batravot, for_voters_2, against_voters_2, proof_2);
    console.log("Submitted a vote proof 1 for the election.")


    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVoters).to.equal(2);
    expect(election.result.yesVoters).to.equal(2);
    expect(election.result.totalVotes).to.equal(80);
    expect(election.result.yesVotes).to.equal(80);
  });

  it("No one voted", async function () {
    const [batravot, token] = await deployElectionContract();
    await startNewElection(batravot);

    // Add key to the election census
    let voters = [
      [40, '0xb10da48cea4c09676b8e0efcd806941465060736032bb898420d0863dca72538', '0xf37d1d2f8b354ec82d821dd1d453b21514b236e6', [BigNumber.from('0x05F0A1D2651B76AE6FC7D466557FE939AF01A0210D631BA766C83A26DE41596F'),BigNumber.from('0x1B567223035188174C9014341FEE0683D8F6CCA267EBCB0C7A5B90FA2A5094FB')], [BigNumber.from('0x27691E1A1AED47799A0DDDDA055A3093DA2CF972A43623BE3F7D3246A5725E21'),BigNumber.from('0x1262D0BF0BEEDFD314576DC7167DE1F5DB120139AB88D6F3ADE7804E0555D5FC')]],

      [25, '0x5820e2e9368deab5178aff7ee0df09768e48c5b5423f14271360b10a1ba7f1df', '0x3bf393f3c02982e2f5a946ae62741166ebc05a1f', [BigNumber.from('0x1DF6966E68AA63C58ADEC573CB0D0B7C67C0E695B48684FC0153B940CB178634'),BigNumber.from('0x1F902CA50B2DC3272FB609C3330669119E4137A010C8AE898DEE638EC71F0FE1')], [BigNumber.from('0x1D12B35F61C6DB1CAA1812FB04400A1B5910D7D79F8A84672CBA579A92C7629E'),BigNumber.from('0x0EDECD270540A427122D855F02DE3D5051D194259D716D10593FAC8DA2E9BDFE')]],

      [125, '0x238edbd5e52d7619a1e1e9f90b1a9043e2fba672bfef15741d679173da11bd47', '0x018683084de5c7d8203bb193b4703f3d26057f69', [BigNumber.from('0x1975D638EC92C028F49E33ABBDCA941622711F036F67B0DB3FDEF7B7FDA9A56D'),BigNumber.from('0x2FE0F0CB2AAAA99E54C971B0ADE104F057AD2C620A4D73F040F1EECC6EB0F96A')], [BigNumber.from('0x2DA2D2BC406202ECC0DE8A2DDACA19C4894880E1F2D937595154484E680F39FF'),BigNumber.from('0x084688ED50552C6B4EFA8173518FF08A03BABCE9001341C43C5DACF81D3FC39E')]]
    ];

    await registerVoters(batravot, token, voters);

    // Submit a proof for the election vote
    // As no one voted, we do not submit a proof

    // Close the election and check the result
    let election = await closeElectionAndGetResult(batravot);

    expect(election.state).to.equal(2);
    expect(election.result.totalVoters).to.equal(0);
    expect(election.result.yesVoters).to.equal(0);
    expect(election.result.totalVotes).to.equal(0);
    expect(election.result.yesVotes).to.equal(0);
  });

  it("One vote `For` counted as `against` Fails", async function () {
    const [batravot, token] = await deployElectionContract();
    await startNewElection(batravot);

    // Add keys to the election census
    let voters = [
      [10, '0xb10da48cea4c09676b8e0efcd806941465060736032bb898420d0863dca72538', '0xf37d1d2f8b354ec82d821dd1d453b21514b236e6', [BigNumber.from('0x05F0A1D2651B76AE6FC7D466557FE939AF01A0210D631BA766C83A26DE41596F'),BigNumber.from('0x1B567223035188174C9014341FEE0683D8F6CCA267EBCB0C7A5B90FA2A5094FB')], [BigNumber.from('0x2D3E50D2BC4A0A21AB1C66E35372F7B4DE3EC19122077B9483947D42296F4B1E'),BigNumber.from('0x0D2C9F3074C53F12B0A1DB9CCF774BD12A0C86787CC33C01924C18998A875C99')]]
    ];
    await registerVoters(batravot, token, voters);

    // Submit a proof for the election vote
    let [proof] = [
      [BigNumber.from('0x0B1AC2FDA2D3DCD7A2DCB191D0C758EB69334C8D54996313B0C5D8BEA44297F9'),BigNumber.from('0x16A3B432B3F22710653035FBC5E8C14C6FF0312BEB5951931F34F7915989FA76')]
    ];

    // Who voted for whom
    let for_voters = []
    let against_voters = ['0xf37d1d2f8b354ec82d821dd1d453b21514b236e6']

    await expect(submitElectionProof(batravot, for_voters, against_voters, proof))
        .to.be.revertedWith("Verification check did not pass");
  });

  it("Proof for different Public Key Fails", async function () {
    const [batravot, token] = await deployElectionContract();
    await startNewElection(batravot);

    // Add keys to the election census
    let voters = [
      [25, '0x5820e2e9368deab5178aff7ee0df09768e48c5b5423f14271360b10a1ba7f1df', '0x3bf393f3c02982e2f5a946ae62741166ebc05a1f', [BigNumber.from('0x1DF6966E68AA63C58ADEC573CB0D0B7C67C0E695B48684FC0153B940CB178634'),BigNumber.from('0x1F902CA50B2DC3272FB609C3330669119E4137A010C8AE898DEE638EC71F0FE1')], [BigNumber.from('0x1D12B35F61C6DB1CAA1812FB04400A1B5910D7D79F8A84672CBA579A92C7629E'),BigNumber.from('0x0EDECD270540A427122D855F02DE3D5051D194259D716D10593FAC8DA2E9BDFE')]],
    ];
    await registerVoters(batravot, token, voters);

    // Submit a proof for the election vote
    let [proof] = [
      [BigNumber.from('0x0B1AC2FDA2D3DCD7A2DCB191D0C758EB69334C8D54996313B0C5D8BEA44297F9'),BigNumber.from('0x16A3B432B3F22710653035FBC5E8C14C6FF0312BEB5951931F34F7915989FA76')]
    ];

    // Who voted for whom
    let for_voters = []
    let against_voters = ['0x3bf393f3c02982e2f5a946ae62741166ebc05a1f']


    await expect(submitElectionProof(batravot, for_voters, against_voters, proof))
        .to.be.revertedWith("Verification check did not pass");
  });

});
